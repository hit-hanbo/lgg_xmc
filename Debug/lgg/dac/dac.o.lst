   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "dac.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_DAC_CH_EnableEvent,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_DAC_CH_EnableEvent:
  25              	.LFB156:
  26              	 .file 1 "C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc/xmc_dac.h"
   1:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
   2:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @file xmc_dac.h
   3:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @date 2015-08-31
   4:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
   5:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @cond
   6:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  **********************************************************************************
   7:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library 
   8:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
   9:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * All rights reserved.                        
  11:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *                                             
  12:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Redistribution and use in source and binary forms, with or without           
  13:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * modification,are permitted provided that the following conditions are met:   
  14:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *                                                                              
  15:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *   Redistributions of source code must retain the above copyright notice,      
  16:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *   this list of conditions and the following disclaimer.                        
  17:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 
  18:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *   Redistributions in binary form must reproduce the above copyright notice,   
  19:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *   this list of conditions and the following disclaimer in the documentation    
  20:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *   and/or other materials provided with the distribution.                       
  21:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 
  22:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *   Neither the name of the copyright holders nor the names of its contributors 
  23:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *   may be used to endorse or promote products derived from this software without
  24:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *   specific prior written permission.                                           
  25:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *                                                                              
  26:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  
  27:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    
  28:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   
  29:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   
  30:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         
  31:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         
  32:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    
  33:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      
  34:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       
  35:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   
  36:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * POSSIBILITY OF SUCH DAMAGE.                                                  
  37:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *                                                                              
  38:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * To improve the quality of the software, users are encouraged to share        
  39:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG       
  40:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * dave@infineon.com).                                                          
  41:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  **********************************************************************************
  42:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
  43:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Change History
  44:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * --------------
  45:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
  46:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 2015-02-18:
  47:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *     - Initial version
  48:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *      
  49:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 2015-02-20:
  50:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *     - Driver description added
  51:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
  52:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 2015-06-19:
  53:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  54:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
  55:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 2015-08-31:
  56:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *     - Help document updated
  57:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @endcond 
  58:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
  59:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
  60:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
  61:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #ifndef XMC_DAC_H
  62:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_H
  63:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
  64:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /*******************************************************************************
  65:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * HEADER FILES
  66:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *******************************************************************************/
  67:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
  68:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #include <xmc_common.h>
  69:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
  70:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /* DAC peripheral is not available on XMC1X devices. */
  71:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #if defined(DAC)
  72:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
  73:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
  74:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @addtogroup XMClib
  75:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @{
  76:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
  77:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
  78:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
  79:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @addtogroup DAC
  80:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @{
  81:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
  82:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @brief Digital to Analog Converter (DAC) driver for XMC 4000 microcontroller family. <br>
  83:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
  84:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC driver uses DAC peripheral to convert digital value to analog value. XMC4000 microcontroller
  85:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * and maximum conversion rate of 2MHz with full accuracy and 5MHz with reduced accuracy.
  86:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * It consists of inbuilt pattern generator, ramp generator and noise generator modes. Additionally
  87:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * in single value mode and in data mode.
  88:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * It has DMA handling capability to generate custom waveforms in data mode without CPU interventio
  89:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
  90:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC driver features:
  91:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * -#  Configuration structure XMC_DAC_CH_CONFIG_t and initialization function XMC_DAC_CH_Init() to
  92:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * -#  Pattern Generator Mode:
  93:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- DAC is configured in pattern generator mode using XMC_DAC_CH_StartPatternMode()
  94:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- XMC_DAC_CH_SetPattern() is used to set the waveform pattern values in pattern register for on
  95:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- Allows to change the trigger frequency using XMC_DAC_CH_SetPatternFrequency()
  96:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * -#  Single Value Mode:
  97:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- DAC is configured in single value mode using XMC_DAC_CH_StartSingleValueMode()
  98:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- Allows to change the trigger frequency using XMC_DAC_CH_SetFrequency()
  99:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * -# Data Mode:
 100:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- DAC is configured in data mode using XMC_DAC_CH_StartDataMode()
 101:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- Allows to change the trigger frequency using XMC_DAC_CH_SetFrequency()
 102:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * -# Ramp Mode:
 103:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *  - DAC is configured in ramp generator mode using XMC_DAC_CH_StartRampMode()
 104:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *  - Allows to change the trigger frequency using XMC_DAC_CH_SetRampFrequency()
 105:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *  - Allows to set the start and stop values of the ramp using XMC_DAC_CH_SetRampStart() and XMC_D
 106:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * -# Noise Mode:
 107:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- DAC is configured in noise mode using XMC_DAC_CH_StartNoiseMode()
 108:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * 	- Allows to change the trigger frequency using XMC_DAC_CH_SetFrequency()
 109:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * -# Allows to change the scale, offset dynamically using XMC_DAC_CH_SetOutputScale() and XMC_DAC_
 110:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * -# Allows to select one of the eight possible trigger sources using XMC_DAC_CH_SetTrigger()
 111:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * -# 2 DAC channels can be used in synchronization in single value mode and data mode to generate 
 112:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 113:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 114:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /*******************************************************************************
 115:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * MACROS
 116:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *******************************************************************************/
 117:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 118:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC0 ((XMC_DAC_t *)DAC_BASE)         /**< DAC module register base */
 119:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 120:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_DACCFG_NEGATE_Msk (0x10000000UL) /*< DAC negation enable mask in XMC44 device */
 121:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_NO_CHANNELS (2U)                 /**< DAC maximum channels */
 122:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_SAMPLES_PER_PERIOD (32U)         /**< DAC samples per period in pattern mode */
 123:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 124:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_PATTERN_TRIANGLE  {0U, 4U, 8U, 12U, 16U, 19U, 23U, 27U, 31U} /**< First quarter Tri
 125:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_PATTERN_SINE      {0U, 6U, 12U, 17U, 22U, 26U, 29U, 30U, 31U} /**< First quarter Si
 126:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_PATTERN_RECTANGLE {31U, 31U, 31U, 31U, 31U, 31U, 31U, 31U, 31U} /**< First quarter 
 127:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 128:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_IS_DAC_VALID(PTR)            ((PTR) == XMC_DAC0)
 129:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_IS_CHANNEL_VALID(CH)         (CH < XMC_DAC_NO_CHANNELS)
 130:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_IS_TRIGGER_VALID(TRIGGER)    ((TRIGGER == XMC_DAC_CH_TRIGGER_INTERNAL) ||\
 131:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_CCU80_SR1) ||
 132:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_CCU40_SR1) ||
 133:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_CCU41_SR1) ||
 134:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_P2_9) ||\
 135:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_P2_8) ||\
 136:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_U0C0_DX1INS) 
 137:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_EXTERNAL_U1C0_DX1INS) 
 138:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (TRIGGER == XMC_DAC_CH_TRIGGER_SOFTWARE))
 139:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_IS_MODE_VALID(MODE)          ((MODE == XMC_DAC_CH_MODE_IDLE) ||\
 140:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (MODE == XMC_DAC_CH_MODE_SINGLE) ||\
 141:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (MODE == XMC_DAC_CH_MODE_DATA) ||\
 142:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (MODE == XMC_DAC_CH_MODE_PATTERN) ||\
 143:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (MODE == XMC_DAC_CH_MODE_NOISE) ||\
 144:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (MODE == XMC_DAC_CH_MODE_RAMP))
 145:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #define XMC_DAC_IS_OUTPUT_SCALE_VALID(SCALE) ((SCALE == XMC_DAC_CH_OUTPUT_SCALE_NONE) ||\
 146:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_2) ||\
 147:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_4) ||\
 148:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_8) ||\
 149:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_16) ||\
 150:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_32) ||\
 151:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_64) ||\
 152:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_MUL_128) ||\
 153:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_2) ||\
 154:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_4) ||\
 155:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_8) ||\
 156:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_16) ||\
 157:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_32) ||\
 158:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_64) ||\
 159:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               (SCALE == XMC_DAC_CH_OUTPUT_SCALE_DIV_128))
 160:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                             
 161:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 162:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /*******************************************************************************
 163:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * ENUMS
 164:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *******************************************************************************/
 165:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 166:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 167:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Return types of the API's
 168:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 169:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_STATUS
 170:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 171:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_STATUS_OK              = 0U, /**< Status is ok, no error detected */
 172:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_STATUS_ERROR           = 1U, /**< Error detected */
 173:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_STATUS_BUSY            = 2U, /**< DAC is busy */
 174:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_STATUS_ERROR_FREQ2LOW  = 3U, /**< Frequency can't be configured. Frequency is to low. 
 175:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH = 4U  /**< Frequency can't be configured. Frequency is to high.
 176:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_STATUS_t;
 177:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 178:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 179:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Operating modes of DAC
 180:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 181:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_MODE
 182:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 183:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_MODE_IDLE    = 0x0U << DAC_DAC0CFG0_MODE_Pos,    /**< DAC is disabled */
 184:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_MODE_SINGLE  = 0x1U << DAC_DAC0CFG0_MODE_Pos,    /**< Single value mode - single data 
 185:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_MODE_DATA    = 0x2U << DAC_DAC0CFG0_MODE_Pos,    /**< Data mode - continuous data proc
 186:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_MODE_PATTERN = 0x3U << DAC_DAC0CFG0_MODE_Pos,    /**< Pattern mode - inbuilt pattern w
 187:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                                                    Sine, Triangle, Rectangle */
 188:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_MODE_NOISE   = 0x4U << DAC_DAC0CFG0_MODE_Pos,    /**< Noise mode - pseudo-random noise
 189:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_MODE_RAMP    = 0x5U << DAC_DAC0CFG0_MODE_Pos     /**< Ramp mode - ramp generation */
 190:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_MODE_t;
 191:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 192:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 193:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Trigger sources for the data update
 194:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 195:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_TRIGGER
 196:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 197:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_INTERNAL =
 198:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x0U << DAC_DAC0CFG1_TRIGMOD_Pos),                                      /**< Internal trigge
 199:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_CCU80_SR1 =
 200:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | 0x0U,                               /**< External trigge
 201:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_CCU40_SR1 =
 202:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | (0x2U << DAC_DAC0CFG1_TRIGSEL_Pos), /**< External trigge
 203:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_CCU41_SR1 =
 204:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | (0x3U << DAC_DAC0CFG1_TRIGSEL_Pos), /**< External trigge
 205:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_P2_9 =
 206:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | (0x4U << DAC_DAC0CFG1_TRIGSEL_Pos), /**< External trigge
 207:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_P2_8 =
 208:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | (0x5U << DAC_DAC0CFG1_TRIGSEL_Pos), /**< External trigge
 209:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_U0C0_DX1INS =
 210:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | (0x6U << DAC_DAC0CFG1_TRIGSEL_Pos), /**< External trigge
 211:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_EXTERNAL_U1C0_DX1INS =
 212:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_TRIGMOD_Pos) | (0x7U << DAC_DAC0CFG1_TRIGSEL_Pos), /**< External trigge
 213:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_TRIGGER_SOFTWARE =
 214:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x2U << DAC_DAC0CFG1_TRIGMOD_Pos)                                       /**< Software trigge
 215:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_TRIGGER_t;
 216:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 217:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 218:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Data type of the input data
 219:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 220:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_DATA_TYPE
 221:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 222:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_DATA_TYPE_UNSIGNED = 0U , /**< input data is unsigned */
 223:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_DATA_TYPE_SIGNED = 1U     /**< input data is signed */
 224:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_DATA_TYPE_t;
 225:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 226:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 227:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Scaling of the input data
 228:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 229:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_OUTPUT_SCALE
 230:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 231:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_NONE =
 232:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       0x0U,                                                                   /**< No scaling */
 233:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_2 =
 234:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x1U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 2 
 235:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_4 =
 236:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x2U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 4 
 237:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_8 =
 238:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x3U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 8 
 239:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_16 =
 240:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x4U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 16
 241:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_32 =
 242:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x5U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 32
 243:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_64 =
 244:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x6U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 64
 245:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_MUL_128 =
 246:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       (0x1U << DAC_DAC0CFG1_MULDIV_Pos) | (0x7U << DAC_DAC0CFG1_SCALE_Pos),   /**< multiplied by 12
 247:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_2 =
 248:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       0x1U << DAC_DAC0CFG1_SCALE_Pos,                                         /**< divided by 2 */
 249:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_4 =
 250:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       0x2U << DAC_DAC0CFG1_SCALE_Pos,                                         /**< divided by 4 */
 251:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_8 =
 252:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       0x3U << DAC_DAC0CFG1_SCALE_Pos,                                         /**< divided by 8 */
 253:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_16 =
 254:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       0x4U << DAC_DAC0CFG1_SCALE_Pos,                                         /**< divided by 16 */
 255:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_32 =
 256:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       0x5U << DAC_DAC0CFG1_SCALE_Pos,                                         /**< divided by 32 */
 257:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_64 =
 258:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       0x6U << DAC_DAC0CFG1_SCALE_Pos,                                         /**< divided by 64 */
 259:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_SCALE_DIV_128 =
 260:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****       0x7U << DAC_DAC0CFG1_SCALE_Pos                                          /**< divided by 128 *
 261:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_OUTPUT_SCALE_t;
 262:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 263:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 264:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Negation of input data (applicable only for XMC44 device)
 265:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 266:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_OUTPUT_NEGATION
 267:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 268:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_NEGATION_DISABLED = 0U,                   /**< XMC_DAC_CH_OUTPUT_NEGATION_DISAB
 269:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_OUTPUT_NEGATION_ENABLED = 1U                     /**< XMC_DAC_CH_OUTPUT_NEGATION_ENABL
 270:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_OUTPUT_NEGATION_t;
 271:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 272:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 273:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Output sign signal for the Pattern Generation Mode
 274:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 275:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** typedef enum XMC_DAC_CH_PATTERN_SIGN_OUTPUT
 276:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 277:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_PATTERN_SIGN_OUTPUT_DISABLED = 0U,  /**< Sign output signal generation is disabled */
 278:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED = 1U    /**< Sign output signal generation is enabled */
 279:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t;
 280:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 281:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /*******************************************************************************
 282:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * DATA STRUCTURES
 283:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *******************************************************************************/
 284:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 285:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC peripheral registers configuration.
 286:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 287:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** typedef struct
 288:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 289:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   __I  uint32_t  ID;
 290:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 291:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   struct
 292:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   {
 293:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****      __IO uint32_t low;
 294:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****      __IO uint32_t high;
 295:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   } DACCFG[XMC_DAC_NO_CHANNELS];
 296:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 297:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   __IO uint32_t DACDATA[XMC_DAC_NO_CHANNELS];
 298:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   __IO uint32_t DAC01DATA;
 299:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 300:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   struct
 301:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   {
 302:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****      __IO uint32_t low;
 303:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****      __IO uint32_t high;
 304:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   } DACPAT[XMC_DAC_NO_CHANNELS];
 305:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 306:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_t;
 307:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 308:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /*Anonymous structure/union guard start*/
 309:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #if defined(__CC_ARM)
 310:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   #pragma push
 311:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   #pragma anon_unions
 312:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #elif defined(__TASKING__)
 313:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   #pragma warning 586
 314:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #endif
 315:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 316:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 317:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Channel related configuration
 318:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 319:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** typedef struct XMC_DAC_CH_CONFIG
 320:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 321:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   union
 322:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   {
 323:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   struct
 324:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   {
 325:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t :23;                /**< Not used bits */
 326:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t data_type:1;        /**< input data type - unsigned / signed */
 327:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t :4;                 /**< Not used bits */
 328:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t output_negation:1;  /**< Negation of the output waveform enabled/disabled */
 329:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t :3;
 330:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   };
 331:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   uint32_t cfg0;
 332:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   };
 333:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   union
 334:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   {
 335:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   struct
 336:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   {
 337:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t output_scale:4;  /**< Scale value of type XMC_DAC_CH_OUTPUT_SCALE_t. It includes scali
 338:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t output_offset:8; /**< offset value */
 339:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     uint32_t :20;
 340:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   };
 341:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   uint32_t cfg1;
 342:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   };
 343:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** } XMC_DAC_CH_CONFIG_t;
 344:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /*Anonymous structure/union guard end*/
 345:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #if defined(__CC_ARM)
 346:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   #pragma pop
 347:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #elif defined(__TASKING__)
 348:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   #pragma warning restore
 349:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #endif
 350:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /*******************************************************************************
 351:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * API PROTOTYPES
 352:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *******************************************************************************/
 353:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 354:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #ifdef __cplusplus
 355:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** extern "C" {
 356:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** #endif
 357:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 358:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 359:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 360:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 361:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 362:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 363:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 364:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Enables DAC clock and releases DAC reset.<br>
 365:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 366:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 367:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Enabling DAC is the first step of DAC initialisation. This API is called by XMC_DAC_CH_Init().
 368:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC clock is enabled by setting \a DAC bit of \a CGATCLR1 register. DAC reset is released by set
 369:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 370:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 371:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 372:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_IsEnabled(), XMC_DAC_Disable(), XMC_DAC_CH_Init()\n\n\n
 373:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 374:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 375:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** void XMC_DAC_Enable(XMC_DAC_t *const dac);
 376:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 377:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 378:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 379:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 380:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 381:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 382:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 383:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Disables DAC clock and resets DAC.
 384:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 385:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 386:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC clock is disabled by setting \a DAC bit of \a CGATSET1 register. DAC is reset by setting \a 
 387:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 388:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 389:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_IsEnabled(), XMC_DAC_Enable()\n\n\n
 390:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 391:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 392:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** void XMC_DAC_Disable(XMC_DAC_t *const dac);
 393:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 394:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 395:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 396:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 397:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return bool<br>
 398:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * true  - if DAC is enabled<br>
 399:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * false - if DAC is disabled
 400:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 401:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 402:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Returns the state of the DAC.
 403:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 404:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 405:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC enabled status is determined by referring to \a DACRS bit of \a PRSTAT1 register.
 406:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 407:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 408:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_Enable(), XMC_DAC_Disable()\n\n\n
 409:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 410:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 411:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** bool XMC_DAC_IsEnabled(const XMC_DAC_t *const dac);
 412:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 413:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 414:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 415:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 416:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 417:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 418:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 419:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC switches to Simultaneous data mode from Independent data mode.
 420:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 421:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 422:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Independent data mode is the default data mode.
 423:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Simultaneous data mode is enabled by setting \a DATMOD bit of \a DAC0CFG1 register.
 424:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 425:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 426:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Set channel 0 and channel 1 to Data mode before calling this API.
 427:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 428:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 429:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_SimultaneousWrite(), XMC_
 430:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 431:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 432:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_EnableSimultaneousDataMode(XMC_DAC_t *const dac)
 433:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 434:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_EnableSimultaneousDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(
 435:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   
 436:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[0].high |= DAC_DAC0CFG1_DATMOD_Msk;
 437:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 438:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 439:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 440:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 441:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 442:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 443:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 444:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 445:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC switches to independent data mode from simultaneous Data mode.
 446:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 447:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 448:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Independent data mode is the default data mode.
 449:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Simultaneous data mode is disabled by clearing \a DATMOD bit of \a DAC0CFG1 register.
 450:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 451:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 452:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartDataMode(), XMC_DAC_EnableSimultaneousDataMode()\n\n\n
 453:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 454:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 455:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_DisableSimultaneousDataMode(XMC_DAC_t *const dac)
 456:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 457:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_DisableSimultaneousDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID
 458:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   
 459:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[0].high &= ~DAC_DAC0CFG1_DATMOD_Msk;
 460:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 461:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 462:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 463:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 464:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param data0 Data for DAC channel 0 [0-4095]
 465:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param data1 Data for DAC channel 1 [0-4095]
 466:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 467:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 468:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 469:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 470:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * The data (\e data0 & \e data1) to be converted by channel 0 & channel 1 are updated to \a DATA1 
 471:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * data0 and data1 have the range of [0-4095].
 472:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 473:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 474:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Channel 0 and Channel 1 should be set to simultaneous data mode before calling this API.
 475:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 476:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 477:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_EnableSimultaneousDataMode()\n\n\n
 478:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 479:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 480:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_SimultaneousWrite(XMC_DAC_t *const dac, const uint16_t data0, const ui
 481:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 482:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_SimultaneousWrite: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 483:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   
 484:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DAC01DATA = (data0 << DAC_DAC01DATA_DATA0_Pos) | (data1 << DAC_DAC01DATA_DATA1_Pos);
 485:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 486:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 487:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 488:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 489:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 490:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param config Pointer to the DAC channel configuration structure
 491:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 492:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 493:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 494:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 495:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Initialises and configures the DAC \e channel with the configuration date pointed by \e config.
 496:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 497:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 498:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * DAC channel is initialised by configuring the registers \a DAC0CFG0 and \a DAC0CFG1 registers (f
 499:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * It enables the channel output by calling XMC_DAC_CH_EnableOutput().
 500:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 501:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 502:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const 
 503:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 504:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 505:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 506:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 507:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 508:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 509:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 510:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 511:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Channel \a channel output is enabled by setting the \a ANAEN bit of \a DAC0CFG1 register (for ch
 512:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 513:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><BR>
 514:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \a tSTARTUP time for DAC analog output starts after the \a ANAEN bit is set to one.
 515:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * After the expiry of the startup time the default value is driven to DAC output and a new value c
 516:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 517:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 518:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_DisableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 519:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 520:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 521:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_EnableOutput(XMC_DAC_t *const dac, const uint8_t channel)
 522:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 523:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_EnableOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 524:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_EnableOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(cha
 525:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   
 526:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].high |= DAC_DAC0CFG1_ANAEN_Msk;
 527:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 528:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 529:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 530:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 531:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 532:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 533:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 534:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 535:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 536:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Channel \a channel output is disabled by clearing the \a ANAEN bit of \a DAC0CFG1 register (for 
 537:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 538:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 539:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * A call to this API stops driving the converted digital input to its output.
 540:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 541:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 542:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_EnableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 543:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 544:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 545:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_DisableOutput(XMC_DAC_t *const dac, const uint8_t channel)
 546:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 547:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_DisableOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 548:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_DisableOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(ch
 549:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   
 550:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].high &= ~DAC_DAC0CFG1_ANAEN_Msk;
 551:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 552:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 553:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 554:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 555:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 556:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 557:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return bool <BR>
 558:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * true  - if analog output is enabled <BR>
 559:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * false - if analog output is disabled <BR>
 560:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 561:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 562:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Returns the status of DAC analog output.
 563:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 564:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 565:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Channel \a channel output enabled or disabled is determined by reading the \a ANAEN bit of \a DA
 566:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 567:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 568:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_EnableOutput(), XMC_DAC_CH_DisableOutput()\n\n\n
 569:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 570:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 571:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE bool XMC_DAC_CH_IsOutputEnabled(const XMC_DAC_t *const dac, const uint8_t channel)
 572:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 573:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_IsOutputEnabled: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 574:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_IsOutputEnabled: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(
 575:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   
 576:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   return (bool)(dac->DACCFG[channel].high & DAC_DAC0CFG1_ANAEN_Msk);
 577:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 578:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 579:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 580:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 581:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 582:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param data Data to be written  [0-4095]
 583:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 584:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 585:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 586:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 587:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Writes the \e data to the \e channel's DATA register.
 588:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 589:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 590:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * The \e data is then converted and driven to the output.
 591:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * If the trigger is set, On a trigger event the data in DATA register is converted and driven to \
 592:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Data \a data is written to the \a channel by loading \a data to \a DATA0 bit-field of \a DAC0DAT
 593:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * data has the range of [0-4095].
 594:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 595:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 596:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * The API can be used for Single Value Mode, Data Mode (Individual) & Ramp Mode.
 597:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call XMC_DAC_CH_EnableOutput() API to enable analog output.
 598:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 599:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 600:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_CH_StartRampMode()\n\n\n
 601:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 602:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 603:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_Write(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t d
 604:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 605:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_Write: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 606:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_Write: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
 607:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   
 608:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACDATA[channel] = data;
 609:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 610:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 611:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 612:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 613:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 614:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 615:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 616:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 617:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 618:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e channel to Single Value Mode by calling XMC_DAC_CH_SetMode().
 619:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 620:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 621:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call XMC_DAC_CH_Write() API to write the data.
 622:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 623:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 624:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_Write()\n\n\n
 625:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 626:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 627:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel);
 628:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 629:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 630:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 631:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 632:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param trigger Data points update trigger
 633:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency Waveform frequency [Hz]
 634:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 635:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t status
 636:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 637:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 638:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e channel to Data mode. Trigger and frequency are configured.
 639:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 640:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 641:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call XMC_DAC_CH_Write() API to write the data. Call XMC_DAC_EnableSimultaneousDataMode() to swit
 642:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 643:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 644:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_Init(), XMC_DAC_CH_Write(), XMC_DAC_EnableSimultaneousDataMode() \n\n\n
 645:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 646:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 647:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode(XMC_DAC_t *const dac,
 648:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                              const uint8_t channel,
 649:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                              const XMC_DAC_CH_TRIGGER_t trigger,
 650:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                              const uint32_t frequency);
 651:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 652:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 653:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 654:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 655:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param start Start point of the ramp [0-4095]
 656:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param stop Stop point of the ramp [0-4095]
 657:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param trigger Data points update trigger
 658:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency Ramp frequency in [Hz]
 659:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 660:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t status
 661:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 662:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 663:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e channel to Ramp mode. Trigger, frequency, start and stop values are configured.
 664:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * On a \e trigger ramp values are converted and driven to \e channel output.
 665:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Start and stop have the range of [0-4095]. Stop should be equal or greater than start. 
 666:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 667:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 668:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * If the ramp counter reaches its \e stop value, it restarts from the \e start value with the next
 669:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 670:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 671:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_Init(), XMC_DAC_CH_GetRampStart(), XMC_DAC_CH_GetRampStop() \n\n\n
 672:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 673:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 674:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartRampMode(XMC_DAC_t *const dac,
 675:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                              const uint8_t channel,
 676:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                              const uint16_t start,
 677:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                              const uint16_t stop,
 678:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                              const XMC_DAC_CH_TRIGGER_t trigger,
 679:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                              const uint32_t frequency);
 680:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 681:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 682:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 683:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 684:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param pattern Data table of a pattern
 685:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param sign_output Sign information of the waveform
 686:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param trigger Data points update trigger
 687:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency Waveform frequency in [Hz]
 688:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 689:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t status
 690:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 691:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 692:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e channel to Pattern mode. Trigger, frequency, sign output and data are configured.
 693:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * On a \e trigger, the \e pattern values are converted and driven to \e channel output.
 694:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 695:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 696:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_Init(), XMC_DAC_CH_DisablePatternSignOutput() \n\n\n
 697:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 698:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 699:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartPatternMode(XMC_DAC_t *const dac,
 700:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                                 const uint8_t channel,
 701:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                                 const uint8_t *const pattern,
 702:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                                 const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output,
 703:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                                 const XMC_DAC_CH_TRIGGER_t trigger,
 704:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                                 const uint32_t frequency);
 705:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 706:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 707:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 708:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 709:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param trigger Data points update trigger
 710:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency Waveform frequency in [Hz]
 711:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 712:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t status
 713:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 714:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 715:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e channel to Noise mode. Trigger and frequency are configured.
 716:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * On a \e trigger the DAC starts converting and drives to \e channel output.
 717:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 718:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 719:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_Init()\n\n\n
 720:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 721:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 722:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode(XMC_DAC_t *const dac,
 723:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               const uint8_t channel,
 724:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               const XMC_DAC_CH_TRIGGER_t trigger,
 725:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                               const uint32_t frequency);
 726:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 727:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 728:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 729:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 730:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param pattern Pointer to the data table
 731:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 732:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 733:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 734:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 735:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * The data for the Pattern mode is written to the \a DAC0PATL and \a DAC0PATH registers.
 736:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * The API is called by XMC_DAC_CH_StartPatternMode().
 737:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 738:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 739:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \a channel is set to Pattern mode.
 740:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 741:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 742:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_EnablePatternSignOutput(), XMC_DAC_CH_DisablePatternSignOutput()\n\n\n
 743:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 744:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 745:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** void XMC_DAC_CH_SetPattern(XMC_DAC_t *const dac, const uint8_t channel, const uint8_t *const patter
 746:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 747:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 748:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 749:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 750:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 751:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 752:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 753:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 754:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Enables the output sign information for Pattern Mode.
 755:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 756:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 757:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sign output is enabled by setting \a SIGNEN bit of \a DAC0CFG0 register (for channel 0) / DAC1CF
 758:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 759:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 760:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \e channel is set to Pattern mode.
 761:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 762:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 763:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_DisablePatternSignOutput()\n\n\n
 764:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 765:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 766:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_EnablePatternSignOutput(XMC_DAC_t *const dac,
 767:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                                      const uint8_t channel)
 768:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 769:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(
 770:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNE
 771:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   
 772:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].low |= DAC_DAC0CFG0_SIGNEN_Msk;
 773:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 774:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 775:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 776:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 777:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 778:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 779:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 780:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 781:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 782:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Disables output sign information for Pattern Mode.
 783:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 784:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 785:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sign output is disabled by clearing \a SIGNEN bit of \a DAC0CFG0 register (for channel 0) / DAC1
 786:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 787:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 788:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \e channel is set to Pattern mode.
 789:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 790:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 791:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_EnablePatternSignOutput()\n\n\n
 792:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 793:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 794:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_DisablePatternSignOutput(XMC_DAC_t *const dac,
 795:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                                      const uint8_t channel)
 796:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 797:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID
 798:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANN
 799:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   
 800:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].low &= ~DAC_DAC0CFG0_SIGNEN_Msk;
 801:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 802:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 803:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 804:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 805:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 806:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param start Ramp start point [0-4095]
 807:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 808:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 809:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 810:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 811:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the ramp start value by writing to the register \a DAC0DATA (for \e channel 0) or \a DAC1DA
 812:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * If the ramp counter reaches its stop value, it restarts from the \a start value with the next tr
 813:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Ensure \e start value is lower than the stop value.
 814:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 815:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 816:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \a channel is set to Ramp mode.
 817:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Start value is a 12 bit data.
 818:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 819:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 820:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_GetRampStart(), XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStop()\n\n\n
 821:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 822:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 823:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_SetRampStart(XMC_DAC_t *const dac, const uint8_t channel, const uin
 824:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 825:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetRampStart: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 826:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetRampStart: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(cha
 827:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   
 828:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACDATA[channel] = start;
 829:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 830:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 831:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 832:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 833:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 834:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 835:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return uint16_t
 836:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 837:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 838:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Gets the ramp start value by reading \a DATA0 bit-field of \a DAC0DATA register (for channel 0) 
 839:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * If the ramp counter reaches its stop value, it restarts from the start value with the next trigg
 840:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 841:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 842:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \e channel is set to Ramp mode.
 843:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 844:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 845:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_SetRampStart(), XMC_DAC_CH_StartRampMode(), XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetR
 846:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 847:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 848:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE uint16_t XMC_DAC_CH_GetRampStart(XMC_DAC_t *const dac, const uint8_t channel)
 849:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 850:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_GetRampStart: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 851:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_GetRampStart: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(cha
 852:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   
 853:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   return (uint16_t)(dac->DACDATA[channel]);
 854:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 855:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 856:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 857:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 858:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 859:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param stop Ramp stop point [0-4095]
 860:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 861:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 862:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 863:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 864:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the ramp stop value by writing to the bit-field \a DATA0 (for \e channel 0) or \a DATA1 (fo
 865:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * If the ramp counter reaches its \a stop value, it restarts from the start value with the next tr
 866:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Ensure \e stop value is higher than the start value.
 867:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 868:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 869:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \e channel is set to Ramp mode.
 870:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Stop value is a 12 bit data.
 871:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 872:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 873:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStart()\n\n\n
 874:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 875:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 876:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint
 877:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 878:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 879:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(chan
 880:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     
 881:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Po
 882:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
 883:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 884:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 885:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 886:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 887:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 888:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 889:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return uint16_t
 890:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 891:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 892:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Gets the ramp stop value by reading \a DATA0 bit-field of \a DAC01DATA register (for channel 0) 
 893:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * If the ramp counter reaches its stop value, it restarts from the start value with the next trigg
 894:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 895:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 896:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API if the \e channel is set to Ramp mode.
 897:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 898:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 899:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_SetRampStop(), XMC_DAC_CH_StartRampMode(), XMC_DAC_CH_GetRampStart()\n\n\n
 900:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 901:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 902:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE uint16_t XMC_DAC_CH_GetRampStop(XMC_DAC_t *const dac, const uint8_t channel)
 903:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 904:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_GetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 905:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_GetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(chan
 906:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 907:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   return((dac->DAC01DATA >> (channel * DAC_DAC01DATA_DATA1_Pos)) & DAC_DAC01DATA_DATA0_Msk);
 908:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 909:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 910:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 911:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 912:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 913:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param trigger Trigger source
 914:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 915:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
 916:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 917:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 918:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Selects the \e trigger source for the \e channel by configuring the bits TRIGSEL & TRIGMOD of CF
 919:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 920:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 921:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Channel \a channel trigger source is selected by \a TRIGSEL bit-field of \a DAC0CFG1 register (f
 922:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 923:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 924:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_SetTrigger(XMC_DAC_t *const dac, const uint8_t channel, const XMC_D
 925:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
 926:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetTrigger: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
 927:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetTrigger: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(chann
 928:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetTrigger: trigger parameter not valid\n", XMC_DAC_IS_TRIGGER_VALID(trigg
 929:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 930:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_TRIGSEL_Msk | DAC_DAC0CFG
 931:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                               trigger;
 932:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
 933:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 934:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 935:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 936:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 937:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency Waveform frequency in [Hz]
 938:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 939:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t
 940:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 941:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 942:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e frequency of DAC channel.
 943:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 944:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 945:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * The value \e frequency acts as clock divider. The smallest \e frequency divider value is 16.
 946:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * A valid \e frequency value should be within the range XMC_DAC_MIN_FREQ_DIVIDER to XMC_DAC_MAX_FR
 947:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Frequency \a frequency is configured by setting \a FREQ bit-field of \a DAC0CFG0 register (for c
 948:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 949:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 950:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API only for Single value mode, Data mode and Noise mode.
 951:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call XMC_DAC_CH_SetRampFrequency() in case of Ramp mode and XMC_DAC_CH_SetPatternFrequency() in 
 952:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 953:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 954:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_SetRampFrequency(), XMC_DAC_CH_SetPatternFrequency()\n\n\n
 955:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 956:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 957:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency(XMC_DAC_t *const dac, const uint8_t channel, const uint
 958:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 959:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 960:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 961:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 962:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency [Hz]
 963:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 964:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t
 965:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 966:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 967:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e frequency of DAC channel by calling XMC_DAC_CH_SetFrequency().
 968:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 969:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 970:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * For the Ramp mode, the \a frequency of operation depends on the total number of sample points (\
 971:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Frequency \e frequency is multiplied by the total number of sample points, so that each trigger 
 972:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 973:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 974:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API only if the \a channel is set to Ramp mode.
 975:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 976:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
 977:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartRampMode()\n\n\n
 978:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 979:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
 980:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency(XMC_DAC_t *const dac, const uint8_t channel, const 
 981:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
 982:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
 983:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
 984:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
 985:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param frequency in [Hz]
 986:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 987:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return XMC_DAC_CH_STATUS_t
 988:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 989:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
 990:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e frequency of DAC channel by calling XMC_DAC_CH_SetFrequency().
 991:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 992:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par
 993:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * For the Pattern mode, the \a frequency of operation depends on the total number of sample points
 994:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Frequency \e frequency is multiplied by the total number of sample points, so that each trigger 
 995:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 996:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
 997:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Call this API only if the \a channel is set to Pattern mode.
 998:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
 999:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
1000:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_StartPatternMode()\n\n\n
1001:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1002:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
1003:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetPatternFrequency(XMC_DAC_t *const dac,
1004:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                                                    const uint8_t channel,
1005:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                                                                    const uint32_t frequency)
1006:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
1007:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetPatternFrequency: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac)
1008:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetPatternFrequency: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VA
1009:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
1010:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   return XMC_DAC_CH_SetFrequency(dac, channel, frequency * XMC_DAC_SAMPLES_PER_PERIOD);
1011:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
1012:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
1013:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
1014:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
1015:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
1016:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param mode DAC operation mode
1017:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1018:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
1019:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1020:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
1021:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 re
1022:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
1023:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1024:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
1025:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_
1026:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
1027:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
1028:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel)
1029:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
1030:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     
1031:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
1032:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****                              mode;
1033:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
1034:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
1035:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
1036:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
1037:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
1038:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1039:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
1040:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1041:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
1042:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e channel's data to signed type by setting \a SIGN bit of \a DAC0CFG0 register (for ch
1043:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * The data for the conversion would then be treated as signed data type.
1044:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1045:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
1046:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Offset and scaling can be applied to the data by calling XMC_DAC_CH_SetOutputOffset(), XMC_DAC_C
1047:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1048:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
1049:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_SetUnsignedDataType()\n\n\n
1050:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1051:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
1052:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_SetSignedDataType(XMC_DAC_t *const dac, const uint8_t channel)
1053:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
1054:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetSignedDataType: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
1055:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetSignedDataType: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALI
1056:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     
1057:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].low |= (DAC_DAC0CFG0_SIGN_Msk);
1058:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
1059:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
1060:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
1061:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
1062:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
1063:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1064:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
1065:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1066:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
1067:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Sets the \e channel's data to unsigned type by clearing \a SIGN bit of \a DAC0CFG0 register (for
1068:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * The data for the conversion would then be treated as unsigned data type.
1069:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1070:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
1071:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Offset and scaling can be applied to the data by calling XMC_DAC_CH_SetOutputOffset(), XMC_DAC_C
1072:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1073:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
1074:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_SetSignedDataType()\n\n\n
1075:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1076:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
1077:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_SetUnsignedDataType(XMC_DAC_t *const dac, const uint8_t channel)
1078:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
1079:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetUnsignedDataType: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac)
1080:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SetUnsignedDataType: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VA
1081:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     
1082:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].low &= ~(DAC_DAC0CFG0_SIGN_Msk);
1083:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
1084:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
1085:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
1086:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
1087:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
1088:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1089:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
1090:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1091:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
1092:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * A call to this API generates a trigger pulse by setting \a SWTRIG bit of \a DAC0CFG1 register (f
1093:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * provided the \a TRIGMOD bit of CFG register is set to \a XMC_DAC_CH_TRIGGER_SOFTWARE.
1094:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1095:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
1096:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * If the \e channel is set to simultaneous data mode, SWTRIG bit of \e channel 1 is not valid.
1097:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Only \a SWTRIG bit of channel 0 is used for channel 1.
1098:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1099:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
1100:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_SetTrigger(), XMC_DAC_CH_EnableEvent()\n\n\n
1101:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1102:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
1103:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_SoftwareTrigger(XMC_DAC_t *const dac, const uint8_t channel)
1104:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
1105:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SoftwareTrigger: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
1106:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_SoftwareTrigger: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(
1107:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     
1108:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].high |= DAC_DAC0CFG1_SWTRIG_Msk;
1109:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
1110:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** 
1111:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** /**
1112:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param dac Pointer to an instance of DAC module
1113:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @param channel DAC channel number
1114:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1115:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * @return None
1116:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1117:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Description:</b><br>
1118:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Enables service request by setting \a SREN bit of \a DAC0CFG0 register (for channel 0) / \a DAC1
1119:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * Trigger signal is generated upon conversion of each data.
1120:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1121:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Note:</b><br>
1122:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * The service request signal can be connected to NVIC, DMA.\n
1123:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1124:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * \par<b>Related APIs:</b><BR>
1125:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  * XMC_DAC_CH_DisableEvent()\n\n\n
1126:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  *
1127:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****  */
1128:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** __STATIC_INLINE void XMC_DAC_CH_EnableEvent(XMC_DAC_t *const dac, const uint8_t channel)
1129:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** {
  27              	 .loc 1 1129 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
1130:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_EnableEvent: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
1131:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   XMC_ASSERT("XMC_DAC_CH_EnableEvent: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(chan
1132:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****     
1133:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h ****   dac->DACCFG[channel].low |= DAC_DAC0CFG0_SREN_Msk;
  45              	 .loc 1 1133 0
  46 000c F878     	 ldrb r0,[r7,#3]
  47 000e FB78     	 ldrb r3,[r7,#3]
  48 0010 7A68     	 ldr r2,[r7,#4]
  49 0012 DB00     	 lsls r3,r3,#3
  50 0014 1344     	 add r3,r3,r2
  51 0016 5B68     	 ldr r3,[r3,#4]
  52 0018 43F08042 	 orr r2,r3,#1073741824
  53 001c 7968     	 ldr r1,[r7,#4]
  54 001e C300     	 lsls r3,r0,#3
  55 0020 0B44     	 add r3,r3,r1
  56 0022 5A60     	 str r2,[r3,#4]
1134:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dac.h **** }
  57              	 .loc 1 1134 0
  58 0024 0C37     	 adds r7,r7,#12
  59              	.LCFI3:
  60              	 .cfi_def_cfa_offset 4
  61 0026 BD46     	 mov sp,r7
  62              	.LCFI4:
  63              	 .cfi_def_cfa_register 13
  64              	 
  65 0028 5DF8047B 	 ldr r7,[sp],#4
  66              	.LCFI5:
  67              	 .cfi_restore 7
  68              	 .cfi_def_cfa_offset 0
  69 002c 7047     	 bx lr
  70              	 .cfi_endproc
  71              	.LFE156:
  73 002e 00BF     	 .section .text.XMC_DMA_CH_Enable,"ax",%progbits
  74              	 .align 2
  75              	 .thumb
  76              	 .thumb_func
  78              	XMC_DMA_CH_Enable:
  79              	.LFB171:
  80              	 .file 2 "C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc/xmc_dma.h"
   1:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
   2:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @file xmc_dma.h
   3:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @date 2017-09-28
   4:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
   5:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @cond
   6:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
   7:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * XMClib v2.1.18 - XMC Peripheral Driver Library
   8:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
   9:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * All rights reserved.                        
  11:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *                                             
  12:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * following conditions are met:   
  14:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  15:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * disclaimer.                        
  17:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 
  18:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 
  21:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  24:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  32:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
  35:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
  36:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Change History
  37:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * --------------
  38:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
  39:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-02-20:
  40:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Initial <br>
  41:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
  42:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-06-20:
  43:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Add the declarations for the following APIs: <br>
  44:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  45:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  46:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  47:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Documentation updates <br>
  48:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  49:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
  50:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 2016-10-28:
  51:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Fix documentation on maximum block size
  52:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
  53:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 2017-09-28:
  54:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Improved documentation and added XMC_DMA_CH_EnableFifo() and XMC_DMA_CH_DisableFifo()
  55:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
  56:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @endcond
  57:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
  58:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
  59:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #ifndef XMC_DMA_H
  60:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA_H
  61:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
  62:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  63:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * HEADER FILES
  64:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
  65:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
  66:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_common.h"
  67:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
  68:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
  69:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
  70:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_dma_map.h"
  71:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
  72:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
  73:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup XMClib XMC Peripheral Library
  74:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  75:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
  76:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
  77:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
  78:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup DMA
  79:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @brief General purpose DMA (GPDMA) driver for the XMC4000 microcontroller family
  80:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
  81:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The GPDMA is a highly configurable DMA controller that allows high-speed data transfers
  82:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * between peripherals and memories. Complex data transfers can be done with minimal
  83:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * intervention of the processor, making CPU available for other operations.
  84:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
  85:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA provides extensive support for XMC microcontroller peripherals like A/D, D/A
  86:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * converters and timers. Data transfers through communication interfaces (USIC) using the
  87:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA increase efficiency and parallelism for real-time applications.
  88:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
  89:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The DMA low level driver provides functions to configure and initialize the GPDMA
  90:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * hardware peripheral.
  91:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  92:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
  93:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
  94:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  95:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * MACROS
  96:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
  97:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
  98:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
  99:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0 ((XMC_DMA_t *)GPDMA0_CH0_BASE) /**< DMA module 0 */
 100:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0_NUM_CHANNELS 8
 101:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 102:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 103:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA1)
 104:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1 ((XMC_DMA_t *)GPDMA1_CH0_BASE) /**< DMA module 1, only available in XMC45xx series
 105:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1_NUM_CHANNELS 4
 106:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 107:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 108:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 109:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * ENUMS
 110:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 111:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 112:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 113:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer types
 114:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 115:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_TYPE
 116:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 117:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK,                                /**< Single block */
 118:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD, /**< Multi-block: src addre
 119:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 120:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,     /**< Multi-block: src addre
 121:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED, /**< Multi-block: src addre
 122:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED,     /**< Multi-block: src addre
 123:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 124:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD,     /**< Multi-block: src addre
 125:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED      /**< Multi-block: src addre
 126:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_TYPE_t;
 127:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 128:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 129:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer flow modes
 130:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 131:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_FLOW
 132:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 133:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2M_DMA    = 0x0UL, /**< Memory to memory (DMA flow controller) */
 134:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA    = 0x1UL, /**< Memory to peripheral (DMA flow controller) */
 135:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA    = 0x2UL, /**< Peripheral to memory (DMA flow controller) */
 136:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA    = 0x3UL, /**< Peripheral to peripheral (DMA flow controller) 
 137:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_PER    = 0x4UL, /**< Peripheral to memory (Peripheral flow controlle
 138:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_SRCPER = 0x5UL, /**< Peripheral to peripheral (Source peripheral flo
 139:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_PER    = 0x6UL, /**< Memory to peripheral (Peripheral flow controlle
 140:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DSTPER = 0x7UL  /**< Peripheral to peripheral (Destination periphera
 141:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_FLOW_t;
 142:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 143:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 144:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid burst length values
 145:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 146:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_BURST_LENGTH
 147:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 148:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_1 = 0x0UL, /**< Burst length: 1 word */
 149:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_4 = 0x1UL, /**< Burst length: 4 words */
 150:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_8 = 0x2UL  /**< Burst length: 8 words */
 151:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_BURST_LENGTH_t;
 152:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 153:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 154:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid transfer width values
 155:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 156:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_WIDTH
 157:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 158:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_8  = 0x0UL, /**< 8-bit transfer width */
 159:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_16 = 0x1UL, /**< 16-bit transfer width */
 160:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_32 = 0x2UL  /**< 32-bit transfer width */
 161:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_WIDTH_t;
 162:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 163:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 164:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA address count mode
 165:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 166:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_ADDRESS_COUNT_MODE
 167:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 168:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT = 0x0UL, /**< Address count mode: increment */
 169:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_DECREMENT = 0x1UL, /**< Address count mode: decrement */
 170:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE = 0x2UL  /**< Address count mode: no change */
 171:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_ADDRESS_COUNT_MODE_t;
 172:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 173:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 174:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel priorities
 175:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 176:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_PRIORITY
 177:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 178:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_0 = 0x0UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 0 (low) *
 179:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_1 = 0x1UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 1 */
 180:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_2 = 0x2UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 2 */
 181:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_3 = 0x3UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 3 */
 182:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_4 = 0x4UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 4 */
 183:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_5 = 0x5UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 5 */
 184:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_6 = 0x6UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 6 */
 185:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_7 = 0x7UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos  /**< DMA channel priority 7 (high) 
 186:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_PRIORITY_t;
 187:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 188:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 189:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Source handshake interface
 190:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 191:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_SRC_HANDSHAKING
 192:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 193:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos, /**< Source: hardwa
 194:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos  /**< Source: softwa
 195:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_SRC_HANDSHAKING_t;
 196:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 197:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 198:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination handshake interface
 199:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 200:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_DST_HANDSHAKING
 201:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 202:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos, /**< Destination: h
 203:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos  /**< Destination: s
 204:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_DST_HANDSHAKING_t;
 205:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 206:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 207:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA hardware handshaking interface
 208:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Hardware handshaking available only if DMA is flow controller
 209:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 210:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_HARDWARE_HANDSHAKING_IF
 211:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 212:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_0 = 0x0UL, /**< Hardware handshaking interface 0 */
 213:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_1 = 0x1UL, /**< Hardware handshaking interface 1 */
 214:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_2 = 0x2UL, /**< Hardware handshaking interface 2 */
 215:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_3 = 0x3UL, /**< Hardware handshaking interface 3 */
 216:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_4 = 0x4UL, /**< Hardware handshaking interface 4 */
 217:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_5 = 0x5UL, /**< Hardware handshaking interface 5 */
 218:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_6 = 0x6UL, /**< Hardware handshaking interface 6 */
 219:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_7 = 0x7UL  /**< Hardware handshaking interface 7 */
 220:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_t;
 221:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 222:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 223:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA events
 224:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 225:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_EVENT
 226:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 227:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_TRANSFER_COMPLETE        = 0x1UL, /**< Transfer complete event */
 228:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE  = 0x2UL, /**< Block transfer complete event */
 229:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE = 0x4UL, /**< Source transaction complete event */
 230:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE = 0x8UL, /**< Destination transaction complete event */
 231:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_ERROR                    = 0x10UL /**< DMA error event */
 232:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_EVENT_t;
 233:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 234:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 235:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Transaction types
 236:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 237:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSACTION_TYPE
 238:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 239:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_SINGLE, /**< Single DMA transaction */
 240:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_BURST   /**< Burst transaction */
 241:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSACTION_TYPE_t;
 242:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 243:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 244:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel status values
 245:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 246:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_STATUS
 247:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 248:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_OK,    /**< DMA status OK */
 249:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_ERROR, /**< DMA status error */
 250:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_BUSY   /**< DMA is busy */
 251:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_STATUS_t;
 252:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 253:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 254:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DATA STRUCTURES
 255:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 256:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 257:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 258:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure <br>
 259:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 260:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 261:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the DMA channel. It is contained within the ::XMC_DMA_t
 262:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * structure. It's registers can be used to configure DMA transfer details
 263:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * like source address, destination address, block size, incrementation
 264:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * modes and the like.
 265:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 266:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  
 267:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct {
 268:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SAR;
 269:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED0;
 270:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DAR;
 271:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED1;
 272:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LLP;
 273:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED2;
 274:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLL;
 275:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLH;
 276:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTAT;
 277:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED3;
 278:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTAT;
 279:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED4;
 280:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTATAR;
 281:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED5;
 282:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTATAR;
 283:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED6;
 284:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGL;
 285:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGH;
 286:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGR;
 287:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED7;
 288:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSR;
 289:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED8;
 290:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } GPDMA_CH_t;
 291:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 292:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 293:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA device structure <br>
 294:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 295:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 296:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the GPDMA peripheral on the XMC4000 series of microcontrollers.
 297:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The registers can be accessed with ::XMC_DMA0 and ::XMC_DMA1.
 298:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 299:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct {
 300:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   GPDMA_CH_t CH[8];
 301:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 302:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  RAWCHEV[10];
 303:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSCHEV[10];
 304:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  MASKCHEV[10];
 305:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __O  uint32_t  CLEARCHEV[10];
 306:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSGLEV;
 307:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED20;
 308:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQSRCREG;
 309:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED21;
 310:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQDSTREG;
 311:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED22;
 312:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQSRCREG;
 313:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED23;
 314:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQDSTREG;
 315:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED24;
 316:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTSRCREG;
 317:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED25;
 318:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTDSTREG;
 319:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED26;
 320:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DMACFGREG;
 321:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED27;
 322:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CHENREG;
 323:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED28;
 324:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  ID;
 325:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED29[19];
 326:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  TYPE;
 327:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  VERSION;
 328:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_t;
 329:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 330:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard start */
 331:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 332:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma push
 333:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma anon_unions
 334:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 335:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma warning 586
 336:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 337:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 338:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 339:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel linked list item.
 340:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Note: Needs to be word aligned
 341:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 342:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_LLI
 343:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 344:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 345:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 346:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   struct XMC_DMA_LLI *llp;                      /**< Linked list pointer of type XMC_DMA_LLI_t */
 347:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   union
 348:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   {
 349:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 350:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     {
 351:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 352:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 353:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 354:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 355:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 356:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 357:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 358:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 359:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 360:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             /**< Reserved bits */
 361:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 362:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 4;                             /**< Reserved bits */
 363:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_linked_list: 1;       /**< Enable destination linked list? */
 364:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_linked_list: 1;       /**< Enable source linked list? */
 365:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 3;                             /**< Reserved bits */
 366:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     };
 367:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 368:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   };
 369:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t block_size;                          /**< Transfer block size */
 370:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_status;                          /**< Source status */
 371:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_status;                          /**< Destination status */
 372:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_LLI_t;
 373:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 374:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef XMC_DMA_LLI_t **XMC_DMA_LIST_t;         /**< Type definition for a linked list pointer */
 375:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 376:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 377:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure
 378:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 379:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_CH_CONFIG
 380:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 381:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   union
 382:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   {
 383:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 384:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 385:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     {
 386:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 387:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 388:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 389:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 390:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 391:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 392:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 393:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 394:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 395:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             
 396:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 397:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 9;                             
 398:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     };
 399:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   };
 400:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 401:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 402:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 403:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_LLI_t *linked_list_pointer;           /**< Linked list pointer */
 404:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   
 405:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   union
 406:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   {
 407:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t src_gather_control;
 408:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 409:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     {
 410:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_interval: 20;         /**< Source gather interval */
 411:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_count: 12;            /**< Source gather count */
 412:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     };
 413:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   };
 414:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 415:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   union
 416:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   {
 417:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t dst_scatter_control;
 418:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 419:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     {
 420:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_interval: 20;        /**< Destination scatter interval */
 421:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_count: 12;           /**< Destination scatter count */
 422:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****     };
 423:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   };
 424:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   
 425:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   uint16_t block_size;                          /**< Block size for DMA controlled transfers [max. 
 426:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_t transfer_type;     /**< DMA transfer type (:: XMC_DMA_CH_TRANSFER_TYPE
 427:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_t priority;               /**< DMA channel priority (::XMC_DMA_CH_PRIORITY_t)
 428:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_t src_handshaking; /**< DMA source handshaking interface (:: XMC_DMA_C
 429:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t src_peripheral_request;               /**< Source peripheral request. See xmc_dma_map.h *
 430:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_t dst_handshaking; /**< DMA destination handshaking interface (:: XMC_
 431:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t dst_peripheral_request;               /**< Destination peripheral request. See xmc_dma_ma
 432:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_CONFIG_t;
 433:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 434:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard end */
 435:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 436:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma pop
 437:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 438:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma warning restore
 439:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 440:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 441:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 442:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel event handler
 443:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 444:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** typedef void (*XMC_DMA_CH_EVENT_HANDLER_t)(XMC_DMA_CH_EVENT_t event);
 445:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 446:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 447:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * API PROTOTYPES
 448:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 449:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 450:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #ifdef __cplusplus
 451:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** extern "C" {
 452:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 453:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 454:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 455:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 456:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 457:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 458:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 459:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Initialize the GPDMA peripheral <br>
 460:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 461:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 462:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function initializes a prioritized list of DMA channels and enables the GPDMA
 463:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral.
 464:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 465:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Init(XMC_DMA_t *const dma);
 466:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 467:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 468:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 469:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 470:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 471:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 472:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Enable the GPDMA peripheral <br>
 473:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 474:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 475:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function de-asserts the GPDMA peripheral reset. In addition, it un-gates the
 476:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA0 peripheral clock for all XMC4000 series of microcontrollers with an exception
 477:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * of the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 478:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 479:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Enable(XMC_DMA_t *const dma);
 480:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 481:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 482:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 483:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 484:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 485:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 486:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Disable the GPDMA peripheral <br>
 487:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 488:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 489:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function asserts the GPDMA peripheral reset. In addition, it gates the GPDMA0
 490:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral clock for all XMC4000 series of microcontrollers with an exception of
 491:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 492:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 493:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Disable(XMC_DMA_t *const dma);
 494:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 495:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 496:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 497:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return bool
 498:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 499:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 500:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Check if the GPDMA peripheral is enabled <br>
 501:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 502:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 503:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * For the XMC4500 microcontroller, the function checks if the GPDMA module is asserted
 504:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * and returns "false" if it is. In addition, it also checks if the clock is gated
 505:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * for the other XMC4000 series of microcontrollers. It returns "true" if the peripheral
 506:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * is enabled.
 507:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 508:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma);
 509:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 510:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 511:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 512:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 513:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 514:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 515:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA event status <br>
 516:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 517:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 518:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the collective (global) status of GPDMA events. The following
 519:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * lists the various DMA events and their corresponding enumeration. The return value
 520:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * of this function may then be masked with any one of the following enumerations to
 521:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * obtain the status of individual DMA events. <br>
 522:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 523:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 524:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Transfer complete -> ::XMC_DMA_CH_EVENT_TRANSFER_COMPLETE                       <br>
 525:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Block transfer complete -> ::XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE           <br>
 526:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 527:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 528:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 529:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 530:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
 531:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 532:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSGLEV);
 533:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** }
 534:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 535:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 536:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 537:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA transfer complete status
 538:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 539:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 540:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Get transfer complete status <br>
 541:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 542:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 543:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA transfer complete interrupt status. <br>
 544:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 545:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
 546:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 547:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[0]);
 548:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** }
 549:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 550:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 551:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 552:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA block complete status
 553:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 554:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 555:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Get block transfer complete status <br>
 556:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 557:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 558:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA block transfer complete interrupt status. <br>
 559:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 560:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
 561:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 562:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[2]);
 563:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** }
 564:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 565:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 566:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 567:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 568:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 569:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 570:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Get source transaction complete status <br>
 571:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 572:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 573:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the source transaction complete interrupt status. <br>
 574:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 575:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 576:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * If the source peripheral is memory, the source transaction complete interrupt is
 577:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * ignored.
 578:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 579:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
 580:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 581:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[4]);
 582:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** }
 583:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 584:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 585:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 586:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 587:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 588:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 589:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Get destination transaction complete status <br>
 590:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 591:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 592:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the destination transaction complete interrupt status <br>
 593:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 594:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 595:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * If the destination peripheral is memory, the destination transaction complete
 596:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * interrupt is ignored.
 597:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 598:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const d
 599:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 600:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[6]);
 601:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** }
 602:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 603:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 604:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 605:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA error event status
 606:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 607:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 608:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA error event status <br>
 609:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 610:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 611:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns error interrupt status. <br>
 612:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 613:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
 614:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
 615:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[8]);
 616:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** }
 617:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 618:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 619:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 620:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param line Which DLR (DMA line router) line should the function use?
 621:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param peripheral Which hardware peripheral is the GPDMA communicating with?
 622:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 623:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 624:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 625:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Enable request line <br>
 626:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 627:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 628:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function enables a DLR (DMA line router) line and selects a service request
 629:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * source, resulting in the trigger of a DMA transfer. <br>
 630:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 631:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 632:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The DLR is used for a DMA transfer typically involving a peripheral; For example,
 633:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * the ADC peripheral may use the DLR in hardware handshaking mode to transfer
 634:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * ADC conversion values to a destination memory block.
 635:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 636:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral);
 637:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 638:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 639:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 640:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param line Which DLR (DMA line router) line should the function use?
 641:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 642:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 643:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 644:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Disable request line <br>
 645:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 646:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 647:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function disables a DLR (DMA line router) line by clearing appropriate bits
 648:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * in the LNEN register. <br>
 649:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 650:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line);
 651:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 652:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 653:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 654:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param line Which DLR (DMA line router) line should the function use?
 655:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 656:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 657:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 658:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Clear request line <br>
 659:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 660:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 661:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function clears a DLR (DMA line router) request line. <br>
 662:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 663:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line);
 664:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 665:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 666:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 667:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param line The line for which the overrun status is requested
 668:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return bool "true" if overrun occured, "false" otherwise
 669:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 670:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 671:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Get overrun status of a DLR line <br>
 672:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 673:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 674:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The DLR module's OVERSTAT register keeps track of DMA service request overruns.
 675:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Should an overrun occur, the bit corresponding to the used DLR line is set. The
 676:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * function simply reads this status and returns "true" if an overrun is detected
 677:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * It returns "false" if an overrun isn't registered.
 678:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 679:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, const uint8_t line);
 680:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 681:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 682:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 683:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param line The line for which the overrun status must be cleared
 684:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 685:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 686:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 687:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Clear overrun status of a DLR line <br>
 688:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 689:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 690:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function clears the overrun status of a line by setting the corresponding
 691:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * line bit in the DLR's OVERCLR register.
 692:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 693:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line);
 694:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 695:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 696:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 697:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param channel The GPDMA channel (number) which needs to be initialized
 698:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param config A constant pointer to ::XMC_DMA_CH_CONFIG_t, pointing to a const
 699:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *               channel configuration
 700:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return XMC_DMA_CH_STATUS_t Initialization status
 701:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 702:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 703:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Initialize a GPDMA channel with provided channel configuration <br>
 704:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 705:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 706:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function sets up the following channel configuration parameters for a GPDMA
 707:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * channel (specified by the parameter channel): <br>
 708:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 1) Source and destination addresses (and linked list address if requested) <br>
 709:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 2) Source and destination handshaking interface (hardware or software?)    <br>
 710:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 3) Scatter/gather configuration                                            <br>
 711:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 4) Source and destination peripheral request (DMA is the flow controller)  <br>
 712:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 5) Transfer flow and type                                                  <br>
 713:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 714:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 715:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns one of the following values: <br>
 716:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 1) In case the DMA channel is not enabled: ::XMC_DMA_CH_STATUS_BUSY        <br>
 717:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 2) If the GPDMA module itself is not enabled: ::XMC_DMA_CH_STATUS_ERROR    <br>
 718:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * 3) If the configuration was successful: ::XMC_DMA_CH_STATUS_OK             <br>
 719:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 720:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 721:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Once the initialization is successful, calling ::XMC_DMA_CH_Enable() will trigger
 722:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * a GPDMA transfer.
 723:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 724:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_C
 725:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** 
 726:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** /**
 727:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 728:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @param channel Which DMA channel should be enabled?
 729:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 730:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 731:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 732:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * Enable a GPDMA channel <br>
 733:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  *
 734:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 735:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * The function sets the GPDMA's CHENREG register to enable a DMA channel. Please
 736:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * ensure that the GPDMA module itself is enabled before calling this function.
 737:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  * See ::XMC_DMA_Enable() for details.
 738:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****  */
 739:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE void XMC_DMA_CH_Enable(XMC_DMA_t *const dma, const uint8_t channel)
 740:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** {
  81              	 .loc 2 740 0
  82              	 .cfi_startproc
  83              	 
  84              	 
  85              	 
  86 0000 80B4     	 push {r7}
  87              	.LCFI6:
  88              	 .cfi_def_cfa_offset 4
  89              	 .cfi_offset 7,-4
  90 0002 83B0     	 sub sp,sp,#12
  91              	.LCFI7:
  92              	 .cfi_def_cfa_offset 16
  93 0004 00AF     	 add r7,sp,#0
  94              	.LCFI8:
  95              	 .cfi_def_cfa_register 7
  96 0006 7860     	 str r0,[r7,#4]
  97 0008 0B46     	 mov r3,r1
  98 000a FB70     	 strb r3,[r7,#3]
 741:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h ****   dma->CHENREG = (uint32_t)(0x101UL << channel);   
  99              	 .loc 2 741 0
 100 000c FB78     	 ldrb r3,[r7,#3]
 101 000e 40F20112 	 movw r2,#257
 102 0012 9A40     	 lsls r2,r2,r3
 103 0014 7B68     	 ldr r3,[r7,#4]
 104 0016 C3F8A023 	 str r2,[r3,#928]
 742:C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/XMCLib/inc\xmc_dma.h **** }
 105              	 .loc 2 742 0
 106 001a 0C37     	 adds r7,r7,#12
 107              	.LCFI9:
 108              	 .cfi_def_cfa_offset 4
 109 001c BD46     	 mov sp,r7
 110              	.LCFI10:
 111              	 .cfi_def_cfa_register 13
 112              	 
 113 001e 5DF8047B 	 ldr r7,[sp],#4
 114              	.LCFI11:
 115              	 .cfi_restore 7
 116              	 .cfi_def_cfa_offset 0
 117 0022 7047     	 bx lr
 118              	 .cfi_endproc
 119              	.LFE171:
 121              	 .global lgg_dac_data_sin
 122              	 .section .rodata.lgg_dac_data_sin,"a",%progbits
 123              	 .align 2
 126              	lgg_dac_data_sin:
 127 0000 00080000 	 .word 2048
 128 0004 1A080000 	 .word 2074
 129 0008 33080000 	 .word 2099
 130 000c 4D080000 	 .word 2125
 131 0010 67080000 	 .word 2151
 132 0014 81080000 	 .word 2177
 133 0018 9A080000 	 .word 2202
 134 001c B4080000 	 .word 2228
 135 0020 CE080000 	 .word 2254
 136 0024 E7080000 	 .word 2279
 137 0028 01090000 	 .word 2305
 138 002c 1A090000 	 .word 2330
 139 0030 34090000 	 .word 2356
 140 0034 4D090000 	 .word 2381
 141 0038 66090000 	 .word 2406
 142 003c 80090000 	 .word 2432
 143 0040 99090000 	 .word 2457
 144 0044 B2090000 	 .word 2482
 145 0048 CB090000 	 .word 2507
 146 004c E4090000 	 .word 2532
 147 0050 FD090000 	 .word 2557
 148 0054 160A0000 	 .word 2582
 149 0058 2F0A0000 	 .word 2607
 150 005c 480A0000 	 .word 2632
 151 0060 600A0000 	 .word 2656
 152 0064 790A0000 	 .word 2681
 153 0068 910A0000 	 .word 2705
 154 006c AA0A0000 	 .word 2730
 155 0070 C20A0000 	 .word 2754
 156 0074 DA0A0000 	 .word 2778
 157 0078 F20A0000 	 .word 2802
 158 007c 0A0B0000 	 .word 2826
 159 0080 220B0000 	 .word 2850
 160 0084 390B0000 	 .word 2873
 161 0088 510B0000 	 .word 2897
 162 008c 680B0000 	 .word 2920
 163 0090 7F0B0000 	 .word 2943
 164 0094 960B0000 	 .word 2966
 165 0098 AD0B0000 	 .word 2989
 166 009c C40B0000 	 .word 3012
 167 00a0 DB0B0000 	 .word 3035
 168 00a4 F10B0000 	 .word 3057
 169 00a8 070C0000 	 .word 3079
 170 00ac 1E0C0000 	 .word 3102
 171 00b0 340C0000 	 .word 3124
 172 00b4 490C0000 	 .word 3145
 173 00b8 5F0C0000 	 .word 3167
 174 00bc 740C0000 	 .word 3188
 175 00c0 8A0C0000 	 .word 3210
 176 00c4 9F0C0000 	 .word 3231
 177 00c8 B40C0000 	 .word 3252
 178 00cc C80C0000 	 .word 3272
 179 00d0 DD0C0000 	 .word 3293
 180 00d4 F10C0000 	 .word 3313
 181 00d8 050D0000 	 .word 3333
 182 00dc 190D0000 	 .word 3353
 183 00e0 2D0D0000 	 .word 3373
 184 00e4 410D0000 	 .word 3393
 185 00e8 540D0000 	 .word 3412
 186 00ec 670D0000 	 .word 3431
 187 00f0 7A0D0000 	 .word 3450
 188 00f4 8D0D0000 	 .word 3469
 189 00f8 9F0D0000 	 .word 3487
 190 00fc B10D0000 	 .word 3505
 191 0100 C30D0000 	 .word 3523
 192 0104 D50D0000 	 .word 3541
 193 0108 E60D0000 	 .word 3558
 194 010c F80D0000 	 .word 3576
 195 0110 090E0000 	 .word 3593
 196 0114 190E0000 	 .word 3609
 197 0118 2A0E0000 	 .word 3626
 198 011c 3A0E0000 	 .word 3642
 199 0120 4A0E0000 	 .word 3658
 200 0124 5A0E0000 	 .word 3674
 201 0128 6A0E0000 	 .word 3690
 202 012c 790E0000 	 .word 3705
 203 0130 880E0000 	 .word 3720
 204 0134 970E0000 	 .word 3735
 205 0138 A50E0000 	 .word 3749
 206 013c B30E0000 	 .word 3763
 207 0140 C10E0000 	 .word 3777
 208 0144 CF0E0000 	 .word 3791
 209 0148 DC0E0000 	 .word 3804
 210 014c E90E0000 	 .word 3817
 211 0150 F60E0000 	 .word 3830
 212 0154 030F0000 	 .word 3843
 213 0158 0F0F0000 	 .word 3855
 214 015c 1B0F0000 	 .word 3867
 215 0160 270F0000 	 .word 3879
 216 0164 320F0000 	 .word 3890
 217 0168 3D0F0000 	 .word 3901
 218 016c 480F0000 	 .word 3912
 219 0170 520F0000 	 .word 3922
 220 0174 5D0F0000 	 .word 3933
 221 0178 670F0000 	 .word 3943
 222 017c 700F0000 	 .word 3952
 223 0180 790F0000 	 .word 3961
 224 0184 830F0000 	 .word 3971
 225 0188 8B0F0000 	 .word 3979
 226 018c 940F0000 	 .word 3988
 227 0190 9C0F0000 	 .word 3996
 228 0194 A40F0000 	 .word 4004
 229 0198 AB0F0000 	 .word 4011
 230 019c B20F0000 	 .word 4018
 231 01a0 B90F0000 	 .word 4025
 232 01a4 C00F0000 	 .word 4032
 233 01a8 C60F0000 	 .word 4038
 234 01ac CC0F0000 	 .word 4044
 235 01b0 D10F0000 	 .word 4049
 236 01b4 D70F0000 	 .word 4055
 237 01b8 DC0F0000 	 .word 4060
 238 01bc E00F0000 	 .word 4064
 239 01c0 E50F0000 	 .word 4069
 240 01c4 E90F0000 	 .word 4073
 241 01c8 EC0F0000 	 .word 4076
 242 01cc F00F0000 	 .word 4080
 243 01d0 F30F0000 	 .word 4083
 244 01d4 F60F0000 	 .word 4086
 245 01d8 F80F0000 	 .word 4088
 246 01dc FA0F0000 	 .word 4090
 247 01e0 FC0F0000 	 .word 4092
 248 01e4 FD0F0000 	 .word 4093
 249 01e8 FF0F0000 	 .word 4095
 250 01ec FF0F0000 	 .word 4095
 251 01f0 FF0F0000 	 .word 4095
 252 01f4 FF0F0000 	 .word 4095
 253 01f8 FF0F0000 	 .word 4095
 254 01fc FF0F0000 	 .word 4095
 255 0200 FF0F0000 	 .word 4095
 256 0204 FD0F0000 	 .word 4093
 257 0208 FC0F0000 	 .word 4092
 258 020c FA0F0000 	 .word 4090
 259 0210 F80F0000 	 .word 4088
 260 0214 F60F0000 	 .word 4086
 261 0218 F30F0000 	 .word 4083
 262 021c F00F0000 	 .word 4080
 263 0220 EC0F0000 	 .word 4076
 264 0224 E90F0000 	 .word 4073
 265 0228 E50F0000 	 .word 4069
 266 022c E00F0000 	 .word 4064
 267 0230 DC0F0000 	 .word 4060
 268 0234 D70F0000 	 .word 4055
 269 0238 D10F0000 	 .word 4049
 270 023c CC0F0000 	 .word 4044
 271 0240 C60F0000 	 .word 4038
 272 0244 C00F0000 	 .word 4032
 273 0248 B90F0000 	 .word 4025
 274 024c B20F0000 	 .word 4018
 275 0250 AB0F0000 	 .word 4011
 276 0254 A40F0000 	 .word 4004
 277 0258 9C0F0000 	 .word 3996
 278 025c 940F0000 	 .word 3988
 279 0260 8B0F0000 	 .word 3979
 280 0264 830F0000 	 .word 3971
 281 0268 7A0F0000 	 .word 3962
 282 026c 700F0000 	 .word 3952
 283 0270 670F0000 	 .word 3943
 284 0274 5D0F0000 	 .word 3933
 285 0278 520F0000 	 .word 3922
 286 027c 480F0000 	 .word 3912
 287 0280 3D0F0000 	 .word 3901
 288 0284 320F0000 	 .word 3890
 289 0288 270F0000 	 .word 3879
 290 028c 1B0F0000 	 .word 3867
 291 0290 0F0F0000 	 .word 3855
 292 0294 030F0000 	 .word 3843
 293 0298 F60E0000 	 .word 3830
 294 029c E90E0000 	 .word 3817
 295 02a0 DC0E0000 	 .word 3804
 296 02a4 CF0E0000 	 .word 3791
 297 02a8 C10E0000 	 .word 3777
 298 02ac B30E0000 	 .word 3763
 299 02b0 A50E0000 	 .word 3749
 300 02b4 970E0000 	 .word 3735
 301 02b8 880E0000 	 .word 3720
 302 02bc 790E0000 	 .word 3705
 303 02c0 6A0E0000 	 .word 3690
 304 02c4 5A0E0000 	 .word 3674
 305 02c8 4A0E0000 	 .word 3658
 306 02cc 3A0E0000 	 .word 3642
 307 02d0 2A0E0000 	 .word 3626
 308 02d4 1A0E0000 	 .word 3610
 309 02d8 090E0000 	 .word 3593
 310 02dc F80D0000 	 .word 3576
 311 02e0 E70D0000 	 .word 3559
 312 02e4 D50D0000 	 .word 3541
 313 02e8 C30D0000 	 .word 3523
 314 02ec B10D0000 	 .word 3505
 315 02f0 9F0D0000 	 .word 3487
 316 02f4 8D0D0000 	 .word 3469
 317 02f8 7A0D0000 	 .word 3450
 318 02fc 670D0000 	 .word 3431
 319 0300 540D0000 	 .word 3412
 320 0304 410D0000 	 .word 3393
 321 0308 2D0D0000 	 .word 3373
 322 030c 1A0D0000 	 .word 3354
 323 0310 060D0000 	 .word 3334
 324 0314 F10C0000 	 .word 3313
 325 0318 DD0C0000 	 .word 3293
 326 031c C90C0000 	 .word 3273
 327 0320 B40C0000 	 .word 3252
 328 0324 9F0C0000 	 .word 3231
 329 0328 8A0C0000 	 .word 3210
 330 032c 750C0000 	 .word 3189
 331 0330 5F0C0000 	 .word 3167
 332 0334 4A0C0000 	 .word 3146
 333 0338 340C0000 	 .word 3124
 334 033c 1E0C0000 	 .word 3102
 335 0340 080C0000 	 .word 3080
 336 0344 F10B0000 	 .word 3057
 337 0348 DB0B0000 	 .word 3035
 338 034c C40B0000 	 .word 3012
 339 0350 AD0B0000 	 .word 2989
 340 0354 960B0000 	 .word 2966
 341 0358 7F0B0000 	 .word 2943
 342 035c 680B0000 	 .word 2920
 343 0360 510B0000 	 .word 2897
 344 0364 390B0000 	 .word 2873
 345 0368 220B0000 	 .word 2850
 346 036c 0A0B0000 	 .word 2826
 347 0370 F20A0000 	 .word 2802
 348 0374 DA0A0000 	 .word 2778
 349 0378 C20A0000 	 .word 2754
 350 037c AA0A0000 	 .word 2730
 351 0380 910A0000 	 .word 2705
 352 0384 790A0000 	 .word 2681
 353 0388 610A0000 	 .word 2657
 354 038c 480A0000 	 .word 2632
 355 0390 2F0A0000 	 .word 2607
 356 0394 160A0000 	 .word 2582
 357 0398 FD090000 	 .word 2557
 358 039c E5090000 	 .word 2533
 359 03a0 CB090000 	 .word 2507
 360 03a4 B2090000 	 .word 2482
 361 03a8 99090000 	 .word 2457
 362 03ac 80090000 	 .word 2432
 363 03b0 67090000 	 .word 2407
 364 03b4 4D090000 	 .word 2381
 365 03b8 34090000 	 .word 2356
 366 03bc 1A090000 	 .word 2330
 367 03c0 01090000 	 .word 2305
 368 03c4 E7080000 	 .word 2279
 369 03c8 CE080000 	 .word 2254
 370 03cc B4080000 	 .word 2228
 371 03d0 9A080000 	 .word 2202
 372 03d4 81080000 	 .word 2177
 373 03d8 67080000 	 .word 2151
 374 03dc 4D080000 	 .word 2125
 375 03e0 34080000 	 .word 2100
 376 03e4 1A080000 	 .word 2074
 377 03e8 00080000 	 .word 2048
 378 03ec E6070000 	 .word 2022
 379 03f0 CD070000 	 .word 1997
 380 03f4 B3070000 	 .word 1971
 381 03f8 99070000 	 .word 1945
 382 03fc 80070000 	 .word 1920
 383 0400 66070000 	 .word 1894
 384 0404 4C070000 	 .word 1868
 385 0408 33070000 	 .word 1843
 386 040c 19070000 	 .word 1817
 387 0410 00070000 	 .word 1792
 388 0414 E6060000 	 .word 1766
 389 0418 CD060000 	 .word 1741
 390 041c B3060000 	 .word 1715
 391 0420 9A060000 	 .word 1690
 392 0424 80060000 	 .word 1664
 393 0428 67060000 	 .word 1639
 394 042c 4E060000 	 .word 1614
 395 0430 35060000 	 .word 1589
 396 0434 1C060000 	 .word 1564
 397 0438 03060000 	 .word 1539
 398 043c EA050000 	 .word 1514
 399 0440 D1050000 	 .word 1489
 400 0444 B8050000 	 .word 1464
 401 0448 A0050000 	 .word 1440
 402 044c 87050000 	 .word 1415
 403 0450 6F050000 	 .word 1391
 404 0454 57050000 	 .word 1367
 405 0458 3E050000 	 .word 1342
 406 045c 26050000 	 .word 1318
 407 0460 0E050000 	 .word 1294
 408 0464 F6040000 	 .word 1270
 409 0468 DF040000 	 .word 1247
 410 046c C7040000 	 .word 1223
 411 0470 B0040000 	 .word 1200
 412 0474 98040000 	 .word 1176
 413 0478 81040000 	 .word 1153
 414 047c 6A040000 	 .word 1130
 415 0480 53040000 	 .word 1107
 416 0484 3C040000 	 .word 1084
 417 0488 26040000 	 .word 1062
 418 048c 0F040000 	 .word 1039
 419 0490 F9030000 	 .word 1017
 420 0494 E3030000 	 .word 995
 421 0498 CD030000 	 .word 973
 422 049c B7030000 	 .word 951
 423 04a0 A1030000 	 .word 929
 424 04a4 8C030000 	 .word 908
 425 04a8 76030000 	 .word 886
 426 04ac 61030000 	 .word 865
 427 04b0 4C030000 	 .word 844
 428 04b4 38030000 	 .word 824
 429 04b8 23030000 	 .word 803
 430 04bc 0F030000 	 .word 783
 431 04c0 FB020000 	 .word 763
 432 04c4 E7020000 	 .word 743
 433 04c8 D3020000 	 .word 723
 434 04cc BF020000 	 .word 703
 435 04d0 AC020000 	 .word 684
 436 04d4 99020000 	 .word 665
 437 04d8 86020000 	 .word 646
 438 04dc 74020000 	 .word 628
 439 04e0 61020000 	 .word 609
 440 04e4 4F020000 	 .word 591
 441 04e8 3D020000 	 .word 573
 442 04ec 2B020000 	 .word 555
 443 04f0 1A020000 	 .word 538
 444 04f4 08020000 	 .word 520
 445 04f8 F7010000 	 .word 503
 446 04fc E7010000 	 .word 487
 447 0500 D6010000 	 .word 470
 448 0504 C6010000 	 .word 454
 449 0508 B6010000 	 .word 438
 450 050c A6010000 	 .word 422
 451 0510 97010000 	 .word 407
 452 0514 87010000 	 .word 391
 453 0518 78010000 	 .word 376
 454 051c 6A010000 	 .word 362
 455 0520 5B010000 	 .word 347
 456 0524 4D010000 	 .word 333
 457 0528 3F010000 	 .word 319
 458 052c 31010000 	 .word 305
 459 0530 24010000 	 .word 292
 460 0534 17010000 	 .word 279
 461 0538 0A010000 	 .word 266
 462 053c FD000000 	 .word 253
 463 0540 F1000000 	 .word 241
 464 0544 E5000000 	 .word 229
 465 0548 DA000000 	 .word 218
 466 054c CE000000 	 .word 206
 467 0550 C3000000 	 .word 195
 468 0554 B8000000 	 .word 184
 469 0558 AE000000 	 .word 174
 470 055c A3000000 	 .word 163
 471 0560 9A000000 	 .word 154
 472 0564 90000000 	 .word 144
 473 0568 87000000 	 .word 135
 474 056c 7E000000 	 .word 126
 475 0570 75000000 	 .word 117
 476 0574 6C000000 	 .word 108
 477 0578 64000000 	 .word 100
 478 057c 5D000000 	 .word 93
 479 0580 55000000 	 .word 85
 480 0584 4E000000 	 .word 78
 481 0588 47000000 	 .word 71
 482 058c 40000000 	 .word 64
 483 0590 3A000000 	 .word 58
 484 0594 34000000 	 .word 52
 485 0598 2F000000 	 .word 47
 486 059c 29000000 	 .word 41
 487 05a0 24000000 	 .word 36
 488 05a4 20000000 	 .word 32
 489 05a8 1B000000 	 .word 27
 490 05ac 17000000 	 .word 23
 491 05b0 14000000 	 .word 20
 492 05b4 10000000 	 .word 16
 493 05b8 0D000000 	 .word 13
 494 05bc 0A000000 	 .word 10
 495 05c0 08000000 	 .word 8
 496 05c4 06000000 	 .word 6
 497 05c8 04000000 	 .word 4
 498 05cc 03000000 	 .word 3
 499 05d0 01000000 	 .word 1
 500 05d4 01000000 	 .word 1
 501 05d8 00000000 	 .word 0
 502 05dc 00000000 	 .word 0
 503 05e0 00000000 	 .word 0
 504 05e4 01000000 	 .word 1
 505 05e8 01000000 	 .word 1
 506 05ec 03000000 	 .word 3
 507 05f0 04000000 	 .word 4
 508 05f4 06000000 	 .word 6
 509 05f8 08000000 	 .word 8
 510 05fc 0A000000 	 .word 10
 511 0600 0D000000 	 .word 13
 512 0604 10000000 	 .word 16
 513 0608 13000000 	 .word 19
 514 060c 17000000 	 .word 23
 515 0610 1B000000 	 .word 27
 516 0614 20000000 	 .word 32
 517 0618 24000000 	 .word 36
 518 061c 29000000 	 .word 41
 519 0620 2E000000 	 .word 46
 520 0624 34000000 	 .word 52
 521 0628 3A000000 	 .word 58
 522 062c 40000000 	 .word 64
 523 0630 47000000 	 .word 71
 524 0634 4E000000 	 .word 78
 525 0638 55000000 	 .word 85
 526 063c 5C000000 	 .word 92
 527 0640 64000000 	 .word 100
 528 0644 6C000000 	 .word 108
 529 0648 75000000 	 .word 117
 530 064c 7D000000 	 .word 125
 531 0650 86000000 	 .word 134
 532 0654 90000000 	 .word 144
 533 0658 99000000 	 .word 153
 534 065c A3000000 	 .word 163
 535 0660 AD000000 	 .word 173
 536 0664 B8000000 	 .word 184
 537 0668 C3000000 	 .word 195
 538 066c CE000000 	 .word 206
 539 0670 D9000000 	 .word 217
 540 0674 E5000000 	 .word 229
 541 0678 F1000000 	 .word 241
 542 067c FD000000 	 .word 253
 543 0680 0A010000 	 .word 266
 544 0684 17010000 	 .word 279
 545 0688 24010000 	 .word 292
 546 068c 31010000 	 .word 305
 547 0690 3F010000 	 .word 319
 548 0694 4D010000 	 .word 333
 549 0698 5B010000 	 .word 347
 550 069c 69010000 	 .word 361
 551 06a0 78010000 	 .word 376
 552 06a4 87010000 	 .word 391
 553 06a8 96010000 	 .word 406
 554 06ac A6010000 	 .word 422
 555 06b0 B5010000 	 .word 437
 556 06b4 C6010000 	 .word 454
 557 06b8 D6010000 	 .word 470
 558 06bc E6010000 	 .word 486
 559 06c0 F7010000 	 .word 503
 560 06c4 08020000 	 .word 520
 561 06c8 19020000 	 .word 537
 562 06cc 2B020000 	 .word 555
 563 06d0 3D020000 	 .word 573
 564 06d4 4F020000 	 .word 591
 565 06d8 61020000 	 .word 609
 566 06dc 73020000 	 .word 627
 567 06e0 86020000 	 .word 646
 568 06e4 99020000 	 .word 665
 569 06e8 AC020000 	 .word 684
 570 06ec BF020000 	 .word 703
 571 06f0 D3020000 	 .word 723
 572 06f4 E6020000 	 .word 742
 573 06f8 FA020000 	 .word 762
 574 06fc 0E030000 	 .word 782
 575 0700 23030000 	 .word 803
 576 0704 37030000 	 .word 823
 577 0708 4C030000 	 .word 844
 578 070c 61030000 	 .word 865
 579 0710 76030000 	 .word 886
 580 0714 8B030000 	 .word 907
 581 0718 A1030000 	 .word 929
 582 071c B6030000 	 .word 950
 583 0720 CC030000 	 .word 972
 584 0724 E2030000 	 .word 994
 585 0728 F8030000 	 .word 1016
 586 072c 0F040000 	 .word 1039
 587 0730 25040000 	 .word 1061
 588 0734 3C040000 	 .word 1084
 589 0738 52040000 	 .word 1106
 590 073c 69040000 	 .word 1129
 591 0740 80040000 	 .word 1152
 592 0744 98040000 	 .word 1176
 593 0748 AF040000 	 .word 1199
 594 074c C7040000 	 .word 1223
 595 0750 DE040000 	 .word 1246
 596 0754 F6040000 	 .word 1270
 597 0758 0E050000 	 .word 1294
 598 075c 26050000 	 .word 1318
 599 0760 3E050000 	 .word 1342
 600 0764 56050000 	 .word 1366
 601 0768 6E050000 	 .word 1390
 602 076c 87050000 	 .word 1415
 603 0770 9F050000 	 .word 1439
 604 0774 B8050000 	 .word 1464
 605 0778 D1050000 	 .word 1489
 606 077c E9050000 	 .word 1513
 607 0780 02060000 	 .word 1538
 608 0784 1B060000 	 .word 1563
 609 0788 34060000 	 .word 1588
 610 078c 4D060000 	 .word 1613
 611 0790 67060000 	 .word 1639
 612 0794 80060000 	 .word 1664
 613 0798 99060000 	 .word 1689
 614 079c B3060000 	 .word 1715
 615 07a0 CC060000 	 .word 1740
 616 07a4 E5060000 	 .word 1765
 617 07a8 FF060000 	 .word 1791
 618 07ac 18070000 	 .word 1816
 619 07b0 32070000 	 .word 1842
 620 07b4 4C070000 	 .word 1868
 621 07b8 65070000 	 .word 1893
 622 07bc 7F070000 	 .word 1919
 623 07c0 99070000 	 .word 1945
 624 07c4 B2070000 	 .word 1970
 625 07c8 CC070000 	 .word 1996
 626 07cc E6070000 	 .word 2022
 627              	 .global lgg_dac_data_harsin
 628              	 .section .rodata.lgg_dac_data_harsin,"a",%progbits
 629              	 .align 2
 632              	lgg_dac_data_harsin:
 633 0000 00080000 	 .word 2048
 634 0004 8D080000 	 .word 2189
 635 0008 19090000 	 .word 2329
 636 000c A0090000 	 .word 2464
 637 0010 220A0000 	 .word 2594
 638 0014 9B0A0000 	 .word 2715
 639 0018 0B0B0000 	 .word 2827
 640 001c 700B0000 	 .word 2928
 641 0020 C90B0000 	 .word 3017
 642 0024 130C0000 	 .word 3091
 643 0028 4F0C0000 	 .word 3151
 644 002c 7C0C0000 	 .word 3196
 645 0030 980C0000 	 .word 3224
 646 0034 A50C0000 	 .word 3237
 647 0038 A10C0000 	 .word 3233
 648 003c 8D0C0000 	 .word 3213
 649 0040 6A0C0000 	 .word 3178
 650 0044 380C0000 	 .word 3128
 651 0048 F80B0000 	 .word 3064
 652 004c AC0B0000 	 .word 2988
 653 0050 550B0000 	 .word 2901
 654 0054 F40A0000 	 .word 2804
 655 0058 8C0A0000 	 .word 2700
 656 005c 1D0A0000 	 .word 2589
 657 0060 AB090000 	 .word 2475
 658 0064 37090000 	 .word 2359
 659 0068 C2080000 	 .word 2242
 660 006c 50080000 	 .word 2128
 661 0070 E2070000 	 .word 2018
 662 0074 7A070000 	 .word 1914
 663 0078 1A070000 	 .word 1818
 664 007c C3060000 	 .word 1731
 665 0080 77060000 	 .word 1655
 666 0084 38060000 	 .word 1592
 667 0088 07060000 	 .word 1543
 668 008c E4050000 	 .word 1508
 669 0090 D1050000 	 .word 1489
 670 0094 CD050000 	 .word 1485
 671 0098 DA050000 	 .word 1498
 672 009c F7050000 	 .word 1527
 673 00a0 24060000 	 .word 1572
 674 00a4 5F060000 	 .word 1631
 675 00a8 AA060000 	 .word 1706
 676 00ac 02070000 	 .word 1794
 677 00b0 66070000 	 .word 1894
 678 00b4 D5070000 	 .word 2005
 679 00b8 4E080000 	 .word 2126
 680 00bc CE080000 	 .word 2254
 681 00c0 53090000 	 .word 2387
 682 00c4 DD090000 	 .word 2525
 683 00c8 680A0000 	 .word 2664
 684 00cc F30A0000 	 .word 2803
 685 00d0 7B0B0000 	 .word 2939
 686 00d4 FF0B0000 	 .word 3071
 687 00d8 7D0C0000 	 .word 3197
 688 00dc F30C0000 	 .word 3315
 689 00e0 5F0D0000 	 .word 3423
 690 00e4 C00D0000 	 .word 3520
 691 00e8 140E0000 	 .word 3604
 692 00ec 5A0E0000 	 .word 3674
 693 00f0 910E0000 	 .word 3729
 694 00f4 B80E0000 	 .word 3768
 695 00f8 D00E0000 	 .word 3792
 696 00fc D70E0000 	 .word 3799
 697 0100 CD0E0000 	 .word 3789
 698 0104 B40E0000 	 .word 3764
 699 0108 8C0E0000 	 .word 3724
 700 010c 540E0000 	 .word 3668
 701 0110 0F0E0000 	 .word 3599
 702 0114 BE0D0000 	 .word 3518
 703 0118 610D0000 	 .word 3425
 704 011c FB0C0000 	 .word 3323
 705 0120 8E0C0000 	 .word 3214
 706 0124 1B0C0000 	 .word 3099
 707 0128 A30B0000 	 .word 2979
 708 012c 2A0B0000 	 .word 2858
 709 0130 B10A0000 	 .word 2737
 710 0134 3B0A0000 	 .word 2619
 711 0138 C8090000 	 .word 2504
 712 013c 5C090000 	 .word 2396
 713 0140 F7080000 	 .word 2295
 714 0144 9C080000 	 .word 2204
 715 0148 4D080000 	 .word 2125
 716 014c 0A080000 	 .word 2058
 717 0150 D5070000 	 .word 2005
 718 0154 AE070000 	 .word 1966
 719 0158 97070000 	 .word 1943
 720 015c 8F070000 	 .word 1935
 721 0160 98070000 	 .word 1944
 722 0164 B1070000 	 .word 1969
 723 0168 D9070000 	 .word 2009
 724 016c 11080000 	 .word 2065
 725 0170 57080000 	 .word 2135
 726 0174 AA080000 	 .word 2218
 727 0178 09090000 	 .word 2313
 728 017c 73090000 	 .word 2419
 729 0180 E6090000 	 .word 2534
 730 0184 610A0000 	 .word 2657
 731 0188 E00A0000 	 .word 2784
 732 018c 640B0000 	 .word 2916
 733 0190 E80B0000 	 .word 3048
 734 0194 6D0C0000 	 .word 3181
 735 0198 EE0C0000 	 .word 3310
 736 019c 6B0D0000 	 .word 3435
 737 01a0 E20D0000 	 .word 3554
 738 01a4 500E0000 	 .word 3664
 739 01a8 B40E0000 	 .word 3764
 740 01ac 0D0F0000 	 .word 3853
 741 01b0 590F0000 	 .word 3929
 742 01b4 960F0000 	 .word 3990
 743 01b8 C50F0000 	 .word 4037
 744 01bc E40F0000 	 .word 4068
 745 01c0 F20F0000 	 .word 4082
 746 01c4 F10F0000 	 .word 4081
 747 01c8 DF0F0000 	 .word 4063
 748 01cc BD0F0000 	 .word 4029
 749 01d0 8B0F0000 	 .word 3979
 750 01d4 4B0F0000 	 .word 3915
 751 01d8 FE0E0000 	 .word 3838
 752 01dc A40E0000 	 .word 3748
 753 01e0 3F0E0000 	 .word 3647
 754 01e4 D10D0000 	 .word 3537
 755 01e8 5B0D0000 	 .word 3419
 756 01ec E00C0000 	 .word 3296
 757 01f0 610C0000 	 .word 3169
 758 01f4 E00B0000 	 .word 3040
 759 01f8 5F0B0000 	 .word 2911
 760 01fc E10A0000 	 .word 2785
 761 0200 680A0000 	 .word 2664
 762 0204 F4090000 	 .word 2548
 763 0208 89090000 	 .word 2441
 764 020c 28090000 	 .word 2344
 765 0210 D1080000 	 .word 2257
 766 0214 88080000 	 .word 2184
 767 0218 4C080000 	 .word 2124
 768 021c 1F080000 	 .word 2079
 769 0220 02080000 	 .word 2050
 770 0224 F4070000 	 .word 2036
 771 0228 F7070000 	 .word 2039
 772 022c 09080000 	 .word 2057
 773 0230 2B080000 	 .word 2091
 774 0234 5C080000 	 .word 2140
 775 0238 9C080000 	 .word 2204
 776 023c E8080000 	 .word 2280
 777 0240 41090000 	 .word 2369
 778 0244 A4090000 	 .word 2468
 779 0248 100A0000 	 .word 2576
 780 024c 830A0000 	 .word 2691
 781 0250 FB0A0000 	 .word 2811
 782 0254 760B0000 	 .word 2934
 783 0258 F30B0000 	 .word 3059
 784 025c 6F0C0000 	 .word 3183
 785 0260 E90C0000 	 .word 3305
 786 0264 5D0D0000 	 .word 3421
 787 0268 CB0D0000 	 .word 3531
 788 026c 300E0000 	 .word 3632
 789 0270 8B0E0000 	 .word 3723
 790 0274 DB0E0000 	 .word 3803
 791 0278 1D0F0000 	 .word 3869
 792 027c 510F0000 	 .word 3921
 793 0280 770F0000 	 .word 3959
 794 0284 8C0F0000 	 .word 3980
 795 0288 910F0000 	 .word 3985
 796 028c 860F0000 	 .word 3974
 797 0290 6B0F0000 	 .word 3947
 798 0294 3F0F0000 	 .word 3903
 799 0298 040F0000 	 .word 3844
 800 029c BB0E0000 	 .word 3771
 801 02a0 650E0000 	 .word 3685
 802 02a4 020E0000 	 .word 3586
 803 02a8 940D0000 	 .word 3476
 804 02ac 1D0D0000 	 .word 3357
 805 02b0 9F0C0000 	 .word 3231
 806 02b4 1C0C0000 	 .word 3100
 807 02b8 950B0000 	 .word 2965
 808 02bc 0D0B0000 	 .word 2829
 809 02c0 850A0000 	 .word 2693
 810 02c4 000A0000 	 .word 2560
 811 02c8 7F090000 	 .word 2431
 812 02cc 05090000 	 .word 2309
 813 02d0 93080000 	 .word 2195
 814 02d4 2B080000 	 .word 2091
 815 02d8 CF070000 	 .word 1999
 816 02dc 80070000 	 .word 1920
 817 02e0 3E070000 	 .word 1854
 818 02e4 0C070000 	 .word 1804
 819 02e8 E9060000 	 .word 1769
 820 02ec D5060000 	 .word 1749
 821 02f0 D2060000 	 .word 1746
 822 02f4 DF060000 	 .word 1759
 823 02f8 FC060000 	 .word 1788
 824 02fc 27070000 	 .word 1831
 825 0300 61070000 	 .word 1889
 826 0304 A8070000 	 .word 1960
 827 0308 FB070000 	 .word 2043
 828 030c 58080000 	 .word 2136
 829 0310 BE080000 	 .word 2238
 830 0314 2B090000 	 .word 2347
 831 0318 9E090000 	 .word 2462
 832 031c 130A0000 	 .word 2579
 833 0320 890A0000 	 .word 2697
 834 0324 FF0A0000 	 .word 2815
 835 0328 710B0000 	 .word 2929
 836 032c DF0B0000 	 .word 3039
 837 0330 460C0000 	 .word 3142
 838 0334 A40C0000 	 .word 3236
 839 0338 F80C0000 	 .word 3320
 840 033c 400D0000 	 .word 3392
 841 0340 7B0D0000 	 .word 3451
 842 0344 A80D0000 	 .word 3496
 843 0348 C60D0000 	 .word 3526
 844 034c D40D0000 	 .word 3540
 845 0350 D20D0000 	 .word 3538
 846 0354 BF0D0000 	 .word 3519
 847 0358 9D0D0000 	 .word 3485
 848 035c 6A0D0000 	 .word 3434
 849 0360 290D0000 	 .word 3369
 850 0364 D90C0000 	 .word 3289
 851 0368 7C0C0000 	 .word 3196
 852 036c 120C0000 	 .word 3090
 853 0370 9F0B0000 	 .word 2975
 854 0374 220B0000 	 .word 2850
 855 0378 9F0A0000 	 .word 2719
 856 037c 160A0000 	 .word 2582
 857 0380 8A090000 	 .word 2442
 858 0384 FD080000 	 .word 2301
 859 0388 71080000 	 .word 2161
 860 038c E7070000 	 .word 2023
 861 0390 63070000 	 .word 1891
 862 0394 E5060000 	 .word 1765
 863 0398 70060000 	 .word 1648
 864 039c 05060000 	 .word 1541
 865 03a0 A6050000 	 .word 1446
 866 03a4 54050000 	 .word 1364
 867 03a8 10050000 	 .word 1296
 868 03ac DB040000 	 .word 1243
 869 03b0 B6040000 	 .word 1206
 870 03b4 A1040000 	 .word 1185
 871 03b8 9B040000 	 .word 1179
 872 03bc A6040000 	 .word 1190
 873 03c0 C1040000 	 .word 1217
 874 03c4 EB040000 	 .word 1259
 875 03c8 23050000 	 .word 1315
 876 03cc 68050000 	 .word 1384
 877 03d0 B9050000 	 .word 1465
 878 03d4 14060000 	 .word 1556
 879 03d8 78060000 	 .word 1656
 880 03dc E3060000 	 .word 1763
 881 03e0 53070000 	 .word 1875
 882 03e4 C6070000 	 .word 1990
 883 03e8 3A080000 	 .word 2106
 884 03ec AD080000 	 .word 2221
 885 03f0 1D090000 	 .word 2333
 886 03f4 88090000 	 .word 2440
 887 03f8 EC090000 	 .word 2540
 888 03fc 470A0000 	 .word 2631
 889 0400 980A0000 	 .word 2712
 890 0404 DD0A0000 	 .word 2781
 891 0408 150B0000 	 .word 2837
 892 040c 3F0B0000 	 .word 2879
 893 0410 5A0B0000 	 .word 2906
 894 0414 650B0000 	 .word 2917
 895 0418 5F0B0000 	 .word 2911
 896 041c 4A0B0000 	 .word 2890
 897 0420 250B0000 	 .word 2853
 898 0424 F00A0000 	 .word 2800
 899 0428 AC0A0000 	 .word 2732
 900 042c 5A0A0000 	 .word 2650
 901 0430 FB090000 	 .word 2555
 902 0434 90090000 	 .word 2448
 903 0438 1B090000 	 .word 2331
 904 043c 9D080000 	 .word 2205
 905 0440 19080000 	 .word 2073
 906 0444 8F070000 	 .word 1935
 907 0448 03070000 	 .word 1795
 908 044c 76060000 	 .word 1654
 909 0450 EA050000 	 .word 1514
 910 0454 61050000 	 .word 1377
 911 0458 DE040000 	 .word 1246
 912 045c 61040000 	 .word 1121
 913 0460 EE030000 	 .word 1006
 914 0464 84030000 	 .word 900
 915 0468 27030000 	 .word 807
 916 046c D7020000 	 .word 727
 917 0470 96020000 	 .word 662
 918 0474 63020000 	 .word 611
 919 0478 41020000 	 .word 577
 920 047c 2E020000 	 .word 558
 921 0480 2C020000 	 .word 556
 922 0484 3A020000 	 .word 570
 923 0488 58020000 	 .word 600
 924 048c 85020000 	 .word 645
 925 0490 C0020000 	 .word 704
 926 0494 08030000 	 .word 776
 927 0498 5C030000 	 .word 860
 928 049c BA030000 	 .word 954
 929 04a0 21040000 	 .word 1057
 930 04a4 8F040000 	 .word 1167
 931 04a8 01050000 	 .word 1281
 932 04ac 77050000 	 .word 1399
 933 04b0 ED050000 	 .word 1517
 934 04b4 62060000 	 .word 1634
 935 04b8 D5060000 	 .word 1749
 936 04bc 42070000 	 .word 1858
 937 04c0 A8070000 	 .word 1960
 938 04c4 05080000 	 .word 2053
 939 04c8 58080000 	 .word 2136
 940 04cc 9F080000 	 .word 2207
 941 04d0 D9080000 	 .word 2265
 942 04d4 04090000 	 .word 2308
 943 04d8 21090000 	 .word 2337
 944 04dc 2E090000 	 .word 2350
 945 04e0 2B090000 	 .word 2347
 946 04e4 17090000 	 .word 2327
 947 04e8 F4080000 	 .word 2292
 948 04ec C2080000 	 .word 2242
 949 04f0 80080000 	 .word 2176
 950 04f4 31080000 	 .word 2097
 951 04f8 D5070000 	 .word 2005
 952 04fc 6D070000 	 .word 1901
 953 0500 FB060000 	 .word 1787
 954 0504 81060000 	 .word 1665
 955 0508 00060000 	 .word 1536
 956 050c 7B050000 	 .word 1403
 957 0510 F3040000 	 .word 1267
 958 0514 6B040000 	 .word 1131
 959 0518 E4030000 	 .word 996
 960 051c 61030000 	 .word 865
 961 0520 E3020000 	 .word 739
 962 0524 6C020000 	 .word 620
 963 0528 FE010000 	 .word 510
 964 052c 9B010000 	 .word 411
 965 0530 45010000 	 .word 325
 966 0534 FC000000 	 .word 252
 967 0538 C1000000 	 .word 193
 968 053c 95000000 	 .word 149
 969 0540 7A000000 	 .word 122
 970 0544 6F000000 	 .word 111
 971 0548 74000000 	 .word 116
 972 054c 89000000 	 .word 137
 973 0550 AF000000 	 .word 175
 974 0554 E3000000 	 .word 227
 975 0558 25010000 	 .word 293
 976 055c 75010000 	 .word 373
 977 0560 D0010000 	 .word 464
 978 0564 35020000 	 .word 565
 979 0568 A3020000 	 .word 675
 980 056c 17030000 	 .word 791
 981 0570 91030000 	 .word 913
 982 0574 0D040000 	 .word 1037
 983 0578 8A040000 	 .word 1162
 984 057c 05050000 	 .word 1285
 985 0580 7D050000 	 .word 1405
 986 0584 F0050000 	 .word 1520
 987 0588 5C060000 	 .word 1628
 988 058c BF060000 	 .word 1727
 989 0590 18070000 	 .word 1816
 990 0594 64070000 	 .word 1892
 991 0598 A4070000 	 .word 1956
 992 059c D5070000 	 .word 2005
 993 05a0 F7070000 	 .word 2039
 994 05a4 09080000 	 .word 2057
 995 05a8 0C080000 	 .word 2060
 996 05ac FE070000 	 .word 2046
 997 05b0 E1070000 	 .word 2017
 998 05b4 B4070000 	 .word 1972
 999 05b8 78070000 	 .word 1912
 1000 05bc 2F070000 	 .word 1839
 1001 05c0 D8060000 	 .word 1752
 1002 05c4 77060000 	 .word 1655
 1003 05c8 0C060000 	 .word 1548
 1004 05cc 98050000 	 .word 1432
 1005 05d0 1F050000 	 .word 1311
 1006 05d4 A1040000 	 .word 1185
 1007 05d8 20040000 	 .word 1056
 1008 05dc 9F030000 	 .word 927
 1009 05e0 20030000 	 .word 800
 1010 05e4 A5020000 	 .word 677
 1011 05e8 2F020000 	 .word 559
 1012 05ec C1010000 	 .word 449
 1013 05f0 5C010000 	 .word 348
 1014 05f4 02010000 	 .word 258
 1015 05f8 B5000000 	 .word 181
 1016 05fc 75000000 	 .word 117
 1017 0600 43000000 	 .word 67
 1018 0604 21000000 	 .word 33
 1019 0608 0F000000 	 .word 15
 1020 060c 0E000000 	 .word 14
 1021 0610 1C000000 	 .word 28
 1022 0614 3B000000 	 .word 59
 1023 0618 6A000000 	 .word 106
 1024 061c A7000000 	 .word 167
 1025 0620 F3000000 	 .word 243
 1026 0624 4C010000 	 .word 332
 1027 0628 B0010000 	 .word 432
 1028 062c 1E020000 	 .word 542
 1029 0630 95020000 	 .word 661
 1030 0634 12030000 	 .word 786
 1031 0638 93030000 	 .word 915
 1032 063c 18040000 	 .word 1048
 1033 0640 9C040000 	 .word 1180
 1034 0644 20050000 	 .word 1312
 1035 0648 9F050000 	 .word 1439
 1036 064c 1A060000 	 .word 1562
 1037 0650 8D060000 	 .word 1677
 1038 0654 F7060000 	 .word 1783
 1039 0658 56070000 	 .word 1878
 1040 065c A9070000 	 .word 1961
 1041 0660 EF070000 	 .word 2031
 1042 0664 27080000 	 .word 2087
 1043 0668 4F080000 	 .word 2127
 1044 066c 68080000 	 .word 2152
 1045 0670 71080000 	 .word 2161
 1046 0674 69080000 	 .word 2153
 1047 0678 52080000 	 .word 2130
 1048 067c 2B080000 	 .word 2091
 1049 0680 F6070000 	 .word 2038
 1050 0684 B3070000 	 .word 1971
 1051 0688 64070000 	 .word 1892
 1052 068c 09070000 	 .word 1801
 1053 0690 A4060000 	 .word 1700
 1054 0694 38060000 	 .word 1592
 1055 0698 C5050000 	 .word 1477
 1056 069c 4F050000 	 .word 1359
 1057 06a0 D6040000 	 .word 1238
 1058 06a4 5D040000 	 .word 1117
 1059 06a8 E5030000 	 .word 997
 1060 06ac 72030000 	 .word 882
 1061 06b0 05030000 	 .word 773
 1062 06b4 9F020000 	 .word 671
 1063 06b8 42020000 	 .word 578
 1064 06bc F1010000 	 .word 497
 1065 06c0 AC010000 	 .word 428
 1066 06c4 74010000 	 .word 372
 1067 06c8 4C010000 	 .word 332
 1068 06cc 33010000 	 .word 307
 1069 06d0 29010000 	 .word 297
 1070 06d4 30010000 	 .word 304
 1071 06d8 48010000 	 .word 328
 1072 06dc 6F010000 	 .word 367
 1073 06e0 A6010000 	 .word 422
 1074 06e4 EC010000 	 .word 492
 1075 06e8 40020000 	 .word 576
 1076 06ec A1020000 	 .word 673
 1077 06f0 0D030000 	 .word 781
 1078 06f4 83030000 	 .word 899
 1079 06f8 01040000 	 .word 1025
 1080 06fc 85040000 	 .word 1157
 1081 0700 0D050000 	 .word 1293
 1082 0704 98050000 	 .word 1432
 1083 0708 23060000 	 .word 1571
 1084 070c AD060000 	 .word 1709
 1085 0710 32070000 	 .word 1842
 1086 0714 B2070000 	 .word 1970
 1087 0718 2B080000 	 .word 2091
 1088 071c 9A080000 	 .word 2202
 1089 0720 FE080000 	 .word 2302
 1090 0724 56090000 	 .word 2390
 1091 0728 A1090000 	 .word 2465
 1092 072c DC090000 	 .word 2524
 1093 0730 090A0000 	 .word 2569
 1094 0734 260A0000 	 .word 2598
 1095 0738 330A0000 	 .word 2611
 1096 073c 2F0A0000 	 .word 2607
 1097 0740 1C0A0000 	 .word 2588
 1098 0744 F9090000 	 .word 2553
 1099 0748 C8090000 	 .word 2504
 1100 074c 89090000 	 .word 2441
 1101 0750 3D090000 	 .word 2365
 1102 0754 E6080000 	 .word 2278
 1103 0758 86080000 	 .word 2182
 1104 075c 1E080000 	 .word 2078
 1105 0760 B0070000 	 .word 1968
 1106 0764 3E070000 	 .word 1854
 1107 0768 C9060000 	 .word 1737
 1108 076c 55060000 	 .word 1621
 1109 0770 E3050000 	 .word 1507
 1110 0774 74050000 	 .word 1396
 1111 0778 0C050000 	 .word 1292
 1112 077c AB040000 	 .word 1195
 1113 0780 54040000 	 .word 1108
 1114 0784 08040000 	 .word 1032
 1115 0788 C8030000 	 .word 968
 1116 078c 96030000 	 .word 918
 1117 0790 73030000 	 .word 883
 1118 0794 5F030000 	 .word 863
 1119 0798 5B030000 	 .word 859
 1120 079c 68030000 	 .word 872
 1121 07a0 84030000 	 .word 900
 1122 07a4 B1030000 	 .word 945
 1123 07a8 ED030000 	 .word 1005
 1124 07ac 37040000 	 .word 1079
 1125 07b0 90040000 	 .word 1168
 1126 07b4 F5040000 	 .word 1269
 1127 07b8 65050000 	 .word 1381
 1128 07bc DE050000 	 .word 1502
 1129 07c0 60060000 	 .word 1632
 1130 07c4 E7060000 	 .word 1767
 1131 07c8 73070000 	 .word 1907
 1132 07cc 00080000 	 .word 2048
 1133              	 .global _bsp_dac_config
 1134              	 .section .rodata._bsp_dac_config,"a",%progbits
 1135              	 .align 2
 1138              	_bsp_dac_config:
 1139 0000 00000000 	 .space 8
 1139      00000000 
 1140              	 .global _bsp_dac0_dma_config
 1141              	 .section .rodata._bsp_dac0_dma_config,"a",%progbits
 1142              	 .align 2
 1145              	_bsp_dac0_dma_config:
 1146 0000 25       	 .byte 37
 1147 0001 01       	 .byte 1
 1148 0002 10       	 .byte 16
 1149 0003 00       	 .space 1
 1150 0004 00000000 	 .word lgg_dac_data_harsin
 1151 0008 14800148 	 .word 1208057876
 1152 000c 00000000 	 .space 12
 1152      00000000 
 1152      00000000 
 1153 0018 F401     	 .short 500
 1154 001a 03       	 .byte 3
 1155 001b 00       	 .byte 0
 1156 001c 0008     	 .short 2048
 1157 001e 0000     	 .space 2
 1158 0020 0000     	 .short 0
 1159 0022 51       	 .byte 81
 1160 0023 00       	 .space 1
 1161              	 .section .text.lgg_dac_init,"ax",%progbits
 1162              	 .align 2
 1163              	 .global lgg_dac_init
 1164              	 .thumb
 1165              	 .thumb_func
 1167              	lgg_dac_init:
 1168              	.LFB188:
 1169              	 .file 3 "../lgg/dac/dac.c"
   1:../lgg/dac/dac.c **** #include "dac.h"
   2:../lgg/dac/dac.c **** #include "dac_data.h"
   3:../lgg/dac/dac.c **** 
   4:../lgg/dac/dac.c **** /*
   5:../lgg/dac/dac.c ****  *   @ Description: DAC output configure
   6:../lgg/dac/dac.c ****  *   @ Author:      HIT-hanbo
   7:../lgg/dac/dac.c ****  *   @ History:     2019-XX-XX  initial
   8:../lgg/dac/dac.c ****  *   				2020-01-18  Add Comments
   9:../lgg/dac/dac.c **** */
  10:../lgg/dac/dac.c **** 
  11:../lgg/dac/dac.c **** 
  12:../lgg/dac/dac.c **** /*
  13:../lgg/dac/dac.c ****  * 		struct to init DMA & DAC(XMC Peripheral Library)
  14:../lgg/dac/dac.c ****  * */
  15:../lgg/dac/dac.c **** const XMC_DAC_CH_CONFIG_t _bsp_dac_config =
  16:../lgg/dac/dac.c **** {
  17:../lgg/dac/dac.c **** 		.output_offset = 0,
  18:../lgg/dac/dac.c **** 		.data_type = XMC_DAC_CH_DATA_TYPE_UNSIGNED,
  19:../lgg/dac/dac.c **** 		.output_scale = XMC_DAC_CH_OUTPUT_SCALE_NONE,
  20:../lgg/dac/dac.c **** 		.output_negation = XMC_DAC_CH_OUTPUT_NEGATION_DISABLED,  // xmc44 serires only
  21:../lgg/dac/dac.c **** };
  22:../lgg/dac/dac.c **** 
  23:../lgg/dac/dac.c **** const XMC_DMA_CH_CONFIG_t _bsp_dac0_dma_config =
  24:../lgg/dac/dac.c **** {
  25:../lgg/dac/dac.c **** 		{
  26:../lgg/dac/dac.c **** 				.enable_interrupt       = 1,
  27:../lgg/dac/dac.c **** 				.dst_transfer_width     = XMC_DMA_CH_TRANSFER_WIDTH_32,
  28:../lgg/dac/dac.c **** 				.src_transfer_width     = XMC_DMA_CH_TRANSFER_WIDTH_32,
  29:../lgg/dac/dac.c **** 				.dst_address_count_mode = XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE,
  30:../lgg/dac/dac.c **** 				.src_address_count_mode = XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT,
  31:../lgg/dac/dac.c **** 				.dst_burst_length       = 0,
  32:../lgg/dac/dac.c **** 				.src_burst_length       = 0,
  33:../lgg/dac/dac.c **** 				.enable_src_gather      = 0,
  34:../lgg/dac/dac.c **** 				.enable_dst_scatter     = 0,
  35:../lgg/dac/dac.c **** 				.transfer_flow          = XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA,
  36:../lgg/dac/dac.c **** 		},
  37:../lgg/dac/dac.c **** 		.src_addr = (uint32_t)&lgg_dac_data_harsin[0],
  38:../lgg/dac/dac.c **** 		.dst_addr = (uint32_t)&DAC->DAC0DATA,
  39:../lgg/dac/dac.c **** 		.block_size = LGG_DAC_DATA_SIZE,
  40:../lgg/dac/dac.c **** 		.transfer_type = XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,
  41:../lgg/dac/dac.c **** 		.priority = XMC_DMA_CH_PRIORITY_0,
  42:../lgg/dac/dac.c **** 		.src_handshaking = XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE,
  43:../lgg/dac/dac.c **** 		.dst_handshaking = XMC_DMA_CH_DST_HANDSHAKING_HARDWARE,
  44:../lgg/dac/dac.c **** 		.dst_peripheral_request = DMA0_PERIPHERAL_REQUEST_DAC_SR0_1
  45:../lgg/dac/dac.c **** };
  46:../lgg/dac/dac.c **** 
  47:../lgg/dac/dac.c **** 
  48:../lgg/dac/dac.c **** /*
  49:../lgg/dac/dac.c ****  * 		Enable DAC0_Channel0 & DMA0_Channel0
  50:../lgg/dac/dac.c ****  * 		to generate a <custom> signal
  51:../lgg/dac/dac.c ****  * 		no any other options needed
  52:../lgg/dac/dac.c ****  * */
  53:../lgg/dac/dac.c **** void lgg_dac_init(void)
  54:../lgg/dac/dac.c **** {
 1170              	 .loc 3 54 0
 1171              	 .cfi_startproc
 1172              	 
 1173              	 
 1174 0000 80B5     	 push {r7,lr}
 1175              	.LCFI12:
 1176              	 .cfi_def_cfa_offset 8
 1177              	 .cfi_offset 7,-8
 1178              	 .cfi_offset 14,-4
 1179 0002 00AF     	 add r7,sp,#0
 1180              	.LCFI13:
 1181              	 .cfi_def_cfa_register 7
  55:../lgg/dac/dac.c **** 	XMC_DMA_Init(LGG_DMA_MODULE);
 1182              	 .loc 3 55 0
 1183 0004 1548     	 ldr r0,.L4
 1184 0006 FFF7FEFF 	 bl XMC_DMA_Init
  56:../lgg/dac/dac.c **** 	XMC_DMA_CH_Init(LGG_DAC0_DMA, &_bsp_dac0_dma_config);
 1185              	 .loc 3 56 0
 1186 000a 1448     	 ldr r0,.L4
 1187 000c 0021     	 movs r1,#0
 1188 000e 144A     	 ldr r2,.L4+4
 1189 0010 FFF7FEFF 	 bl XMC_DMA_CH_Init
  57:../lgg/dac/dac.c **** 	XMC_DMA_CH_Enable(LGG_DAC0_DMA);
 1190              	 .loc 3 57 0
 1191 0014 1148     	 ldr r0,.L4
 1192 0016 0021     	 movs r1,#0
 1193 0018 FFF7FEFF 	 bl XMC_DMA_CH_Enable
  58:../lgg/dac/dac.c **** 
  59:../lgg/dac/dac.c **** 	/* DMA interrupt may cause a delay while a period transmission */
  60:../lgg/dac/dac.c **** 	/* but this junk DMA channel does not support multiblock transmission */
  61:../lgg/dac/dac.c **** 	/* junk MCU !!!! */
  62:../lgg/dac/dac.c **** //	XMC_DMA_CH_EnableEvent(LGG_DAC1_DMA, XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
  63:../lgg/dac/dac.c **** //	NVIC_SetPriority(GPDMA0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0));
  64:../lgg/dac/dac.c **** //	NVIC_EnableIRQ(GPDMA0_0_IRQn);
  65:../lgg/dac/dac.c **** 
  66:../lgg/dac/dac.c **** 	XMC_DAC_Enable(XMC_DAC0);
 1194              	 .loc 3 66 0
 1195 001c 1148     	 ldr r0,.L4+8
 1196 001e FFF7FEFF 	 bl XMC_DAC_Enable
  67:../lgg/dac/dac.c **** 	XMC_DAC_CH_Init(LGG_DAC_SIG, &_bsp_dac_config);
 1197              	 .loc 3 67 0
 1198 0022 1048     	 ldr r0,.L4+8
 1199 0024 0021     	 movs r1,#0
 1200 0026 104A     	 ldr r2,.L4+12
 1201 0028 FFF7FEFF 	 bl XMC_DAC_CH_Init
  68:../lgg/dac/dac.c **** 	XMC_DAC_CH_Init(LGG_DAC_FIL, &_bsp_dac_config);
 1202              	 .loc 3 68 0
 1203 002c 0D48     	 ldr r0,.L4+8
 1204 002e 0121     	 movs r1,#1
 1205 0030 0D4A     	 ldr r2,.L4+12
 1206 0032 FFF7FEFF 	 bl XMC_DAC_CH_Init
  69:../lgg/dac/dac.c **** 	XMC_DAC_CH_EnableEvent(LGG_DAC_SIG);
 1207              	 .loc 3 69 0
 1208 0036 0B48     	 ldr r0,.L4+8
 1209 0038 0021     	 movs r1,#0
 1210 003a FFF7FEFF 	 bl XMC_DAC_CH_EnableEvent
  70:../lgg/dac/dac.c **** 	XMC_DAC_CH_EnableEvent(LGG_DAC_FIL);
 1211              	 .loc 3 70 0
 1212 003e 0948     	 ldr r0,.L4+8
 1213 0040 0121     	 movs r1,#1
 1214 0042 FFF7FEFF 	 bl XMC_DAC_CH_EnableEvent
  71:../lgg/dac/dac.c **** 
  72:../lgg/dac/dac.c **** 	XMC_DAC_CH_StartDataMode(LGG_DAC_SIG, XMC_DAC_CH_TRIGGER_INTERNAL, 80000U);
 1215              	 .loc 3 72 0
 1216 0046 0748     	 ldr r0,.L4+8
 1217 0048 0021     	 movs r1,#0
 1218 004a 0022     	 movs r2,#0
 1219 004c 074B     	 ldr r3,.L4+16
 1220 004e FFF7FEFF 	 bl XMC_DAC_CH_StartDataMode
  73:../lgg/dac/dac.c **** 	XMC_DAC_CH_StartSingleValueMode(LGG_DAC_FIL);
 1221              	 .loc 3 73 0
 1222 0052 0448     	 ldr r0,.L4+8
 1223 0054 0121     	 movs r1,#1
 1224 0056 FFF7FEFF 	 bl XMC_DAC_CH_StartSingleValueMode
  74:../lgg/dac/dac.c **** 
  75:../lgg/dac/dac.c **** }
 1225              	 .loc 3 75 0
 1226 005a 80BD     	 pop {r7,pc}
 1227              	.L5:
 1228              	 .align 2
 1229              	.L4:
 1230 005c 00400150 	 .word 1342259200
 1231 0060 00000000 	 .word _bsp_dac0_dma_config
 1232 0064 00800148 	 .word 1208057856
 1233 0068 00000000 	 .word _bsp_dac_config
 1234 006c 80380100 	 .word 80000
 1235              	 .cfi_endproc
 1236              	.LFE188:
 1238              	 .text
 1239              	.Letext0:
 1240              	 .file 4 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1241              	 .file 5 "c:\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1242              	 .file 6 "C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1243              	 .file 7 "C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/CMSIS/Include/cmsis_gcc.h"
 1244              	 .file 8 "C:/Users/lgg/Desktop/hithanbo/dave_ws/lgg_xmc/Libraries/CMSIS/Include/core_cm4.h"
 1245              	 .file 9 "../lgg/dac/dac_data.h"
DEFINED SYMBOLS
                            *ABS*:00000000 dac.c
    {standard input}:20     .text.XMC_DAC_CH_EnableEvent:00000000 $t
    {standard input}:24     .text.XMC_DAC_CH_EnableEvent:00000000 XMC_DAC_CH_EnableEvent
    {standard input}:74     .text.XMC_DMA_CH_Enable:00000000 $t
    {standard input}:78     .text.XMC_DMA_CH_Enable:00000000 XMC_DMA_CH_Enable
    {standard input}:126    .rodata.lgg_dac_data_sin:00000000 lgg_dac_data_sin
    {standard input}:123    .rodata.lgg_dac_data_sin:00000000 $d
    {standard input}:632    .rodata.lgg_dac_data_harsin:00000000 lgg_dac_data_harsin
    {standard input}:629    .rodata.lgg_dac_data_harsin:00000000 $d
    {standard input}:1138   .rodata._bsp_dac_config:00000000 _bsp_dac_config
    {standard input}:1135   .rodata._bsp_dac_config:00000000 $d
    {standard input}:1145   .rodata._bsp_dac0_dma_config:00000000 _bsp_dac0_dma_config
    {standard input}:1142   .rodata._bsp_dac0_dma_config:00000000 $d
    {standard input}:1162   .text.lgg_dac_init:00000000 $t
    {standard input}:1167   .text.lgg_dac_init:00000000 lgg_dac_init
    {standard input}:1230   .text.lgg_dac_init:0000005c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_DMA_Init
XMC_DMA_CH_Init
XMC_DAC_Enable
XMC_DAC_CH_Init
XMC_DAC_CH_StartDataMode
XMC_DAC_CH_StartSingleValueMode
